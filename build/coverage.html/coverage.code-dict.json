{"/home/travis/build/npmtest/node-npmtest-react-codemod/test.js":"/* istanbul instrument in package npmtest_react_codemod */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-codemod/lib.npmtest_react_codemod.js":"/* istanbul instrument in package npmtest_react_codemod */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_codemod = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_codemod = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-codemod/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-codemod && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_codemod */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_codemod\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_codemod.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_codemod.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_codemod.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_codemod.__dirname + '/lib.npmtest_react_codemod.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/.eslintrc.js":"module.exports = {\n  parser: 'babel-eslint',\n\n  extends: './node_modules/fbjs-scripts/eslint/.eslintrc.js',\n\n  plugins: [\n    'react',\n  ],\n\n  ecmaFeatures: {\n    modules: false\n  },\n\n  rules: {\n    'no-use-before-define': 2,\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/jest/env.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\njest.autoMockOff();\n\nconst fs = require('fs');\nconst p = require('path');\n\nconst read = fileName => fs.readFileSync(\n  p.join(__dirname, global.baseDir, 'test', fileName),\n  'utf8'\n);\n\nglobal.test = (transformName, testFileName, options, fakeOptions) => {\n  console.warn(\n    'react-codemod test() is deprecated. Please use jscodeshift testUtils ' +\n    'instead. See http://dl.vc/jscodeshift-test'\n  );\n\n  const jscodeshift = require('jscodeshift');\n  const source = read(testFileName + '.js');\n  const output = read(testFileName + '.output.js');\n  let path = testFileName + '.js';\n  let transform = require(\n    p.join(global.baseDir, '/transforms/', transformName)\n  );\n  if (transform.default) {\n    transform = transform.default;\n  }\n\n  if (fakeOptions && fakeOptions.path) {\n    path = fakeOptions.path;\n  }\n\n  expect(\n    (transform({path, source}, {jscodeshift}, options || {}) || '').trim()\n  ).toEqual(\n    output.trim()\n  );\n};\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/class.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nmodule.exports = (file, api, options) => {\n  const j = api.jscodeshift;\n\n  require('./utils/array-polyfills');\n  const ReactUtils = require('./utils/ReactUtils')(j);\n\n  const printOptions =\n    options.printOptions || {\n      quote: 'single',\n      trailingComma: true,\n      flowObjectCommas: true,\n      arrowParensAlways: true,\n    };\n\n  const root = j(file.source);\n\n  // retain top comments\n  const { comments: topComments } = root.find(j.Program).get('body', 0).node;\n\n  const AUTOBIND_IGNORE_KEYS = {\n    componentDidMount: true,\n    componentDidUpdate: true,\n    componentWillReceiveProps: true,\n    componentWillMount: true,\n    componentWillUpdate: true,\n    componentWillUnmount: true,\n    getChildContext: true,\n    getDefaultProps: true,\n    getInitialState: true,\n    render: true,\n    shouldComponentUpdate: true,\n  };\n\n  const DEFAULT_PROPS_FIELD = 'getDefaultProps';\n  const DEFAULT_PROPS_KEY = 'defaultProps';\n  const GET_INITIAL_STATE_FIELD = 'getInitialState';\n\n  const DEPRECATED_APIS = [\n    'getDOMNode',\n    'isMounted',\n    'replaceProps',\n    'replaceState',\n    'setProps',\n  ];\n\n  const PURE_MIXIN_MODULE_NAME = options['mixin-module-name'] ||\n    'react-addons-pure-render-mixin';\n\n  const STATIC_KEY = 'statics';\n\n  const STATIC_KEYS = {\n    childContextTypes: true,\n    contextTypes: true,\n    displayName: true,\n    propTypes: true,\n  };\n\n  const MIXIN_KEY = 'mixins';\n\n  let shouldTransformFlow = false;\n\n  if (options['flow']) {\n    const programBodyNode = root.find(j.Program).get('body', 0).node;\n    if (programBodyNode && programBodyNode.comments) {\n      programBodyNode.comments.forEach(node => {\n        if (node.value.indexOf('@flow') !== -1) {\n          shouldTransformFlow = true;\n        }\n      });\n    }\n  }\n\n  // ---------------------------------------------------------------------------\n  // Helpers\n  const createFindPropFn = prop => property => (\n    property.key &&\n    property.key.type === 'Identifier' &&\n    property.key.name === prop\n  );\n\n  const filterDefaultPropsField = node =>\n    createFindPropFn(DEFAULT_PROPS_FIELD)(node);\n\n  const filterGetInitialStateField = node =>\n    createFindPropFn(GET_INITIAL_STATE_FIELD)(node);\n\n  const findGetInitialState = specPath =>\n    specPath.properties.find(createFindPropFn(GET_INITIAL_STATE_FIELD));\n\n  const withComments = (to, from) => {\n    to.comments = from.comments;\n    return to;\n  };\n\n  const isPrimExpression = node => (\n    node.type === 'Literal' || ( // NOTE this might change in babylon v6\n      node.type === 'Identifier' &&\n      node.name === 'undefined'\n  ));\n\n  const isFunctionExpression = node => (\n    node.key &&\n    node.key.type === 'Identifier' &&\n    node.value &&\n    node.value.type === 'FunctionExpression'\n  );\n\n  const isPrimProperty = prop => (\n    prop.key &&\n    prop.key.type === 'Identifier' &&\n    prop.value &&\n    isPrimExpression(prop.value)\n  );\n\n  const isPrimPropertyWithTypeAnnotation = prop => (\n    prop.key &&\n    prop.key.type === 'Identifier' &&\n    prop.value &&\n    prop.value.type === 'TypeCastExpression' &&\n    isPrimExpression(prop.value.expression)\n  );\n\n  const hasSingleReturnStatement = value => (\n    value.type === 'FunctionExpression' &&\n    value.body &&\n    value.body.type === 'BlockStatement' &&\n    value.body.body &&\n    value.body.body.length === 1 &&\n    value.body.body[0].type === 'ReturnStatement' &&\n    value.body.body[0].argument\n  );\n\n  const isInitialStateLiftable = getInitialState => {\n    if (!getInitialState || !(getInitialState.value)) {\n      return true;\n    }\n\n    return hasSingleReturnStatement(getInitialState.value);\n  };\n\n  // ---------------------------------------------------------------------------\n  // Checks if the module uses mixins or accesses deprecated APIs.\n  const checkDeprecatedAPICalls = classPath =>\n    DEPRECATED_APIS.reduce(\n      (acc, name) =>\n        acc + j(classPath)\n          .find(j.Identifier, {name})\n          .size(),\n      0\n    ) > 0;\n\n  const hasNoCallsToDeprecatedAPIs = classPath => {\n    if (checkDeprecatedAPICalls(classPath)) {\n      console.warn(\n        file.path + ': `' + ReactUtils.directlyGetComponentName(classPath) + '` ' +\n        'was skipped because of deprecated API calls. Remove calls to ' +\n        DEPRECATED_APIS.join(', ') + ' in your React component and re-run ' +\n        'this script.'\n      );\n      return false;\n    }\n    return true;\n  };\n\n  const hasNoRefsToAPIsThatWillBeRemoved = classPath => {\n    const hasInvalidCalls = (\n      j(classPath).find(j.MemberExpression, {\n        object: {type: 'ThisExpression'},\n        property: {name: DEFAULT_PROPS_FIELD},\n      }).size() > 0 ||\n      j(classPath).find(j.MemberExpression, {\n        object: {type: 'ThisExpression'},\n        property: {name: GET_INITIAL_STATE_FIELD},\n      }).size() > 0\n    );\n\n    if (hasInvalidCalls) {\n      console.warn(\n        file.path + ': `' + ReactUtils.directlyGetComponentName(classPath) + '` ' +\n        'was skipped because of API calls that will be removed. Remove calls to `' +\n        DEFAULT_PROPS_FIELD + '` and/or `' + GET_INITIAL_STATE_FIELD +\n        '` in your React component and re-run this script.'\n      );\n      return false;\n    }\n    return true;\n  };\n\n  const doesNotUseArguments = classPath => {\n    const hasArguments = (\n      j(classPath).find(j.Identifier, {name: 'arguments'}).size() > 0\n    );\n    if (hasArguments) {\n      console.warn(\n        file.path + ': `' + ReactUtils.directlyGetComponentName(classPath) + '` ' +\n        'was skipped because `arguments` was found in your functions. ' +\n        'Arrow functions do not expose an `arguments` object; ' +\n        'consider changing to use ES6 spread operator and re-run this script.'\n      );\n      return false;\n    }\n    return true;\n  };\n\n  const isGetInitialStateConstructorSafe = getInitialState => {\n    if (!getInitialState) {\n      return true;\n    }\n\n    const collection = j(getInitialState);\n    let result = true;\n\n    const propsVarDeclarationCount = collection.find(j.VariableDeclarator, {\n      id: {name: 'props'},\n    }).size();\n\n    const contextVarDeclarationCount = collection.find(j.VariableDeclarator, {\n      id: {name: 'context'},\n    }).size();\n\n    if (\n      propsVarDeclarationCount &&\n      propsVarDeclarationCount !== collection.find(j.VariableDeclarator, {\n        id: {name: 'props'},\n        init: {\n          type: 'MemberExpression',\n          object: {type: 'ThisExpression'},\n          property: {name: 'props'},\n        }\n      }).size()\n    ) {\n      result = false;\n    }\n\n    if (\n      contextVarDeclarationCount &&\n      contextVarDeclarationCount !== collection.find(j.VariableDeclarator, {\n        id: {name: 'context'},\n        init: {\n          type: 'MemberExpression',\n          object: {type: 'ThisExpression'},\n          property: {name: 'context'},\n        }\n      }).size()\n    ) {\n      result = false;\n    }\n\n    return result;\n  };\n\n  const isInitialStateConvertible = classPath => {\n    const specPath = ReactUtils.directlyGetCreateClassSpec(classPath);\n    if (!specPath) {\n      return false;\n    }\n    const result = isGetInitialStateConstructorSafe(findGetInitialState(specPath));\n    if (!result) {\n      console.warn(\n        file.path + ': `' + ReactUtils.directlyGetComponentName(classPath) + '` ' +\n        'was skipped because of potential shadowing issues were found in ' +\n        'the React component. Rename variable declarations of `props` and/or `context` ' +\n        'in your `getInitialState` and re-run this script.'\n      );\n    }\n    return result;\n  };\n\n  const canConvertToClass = classPath => {\n    const specPath = ReactUtils.directlyGetCreateClassSpec(classPath);\n    if (!specPath) {\n      return false;\n    }\n    const invalidProperties = specPath.properties.filter(prop => (\n      !prop.key.name || (\n        !STATIC_KEYS.hasOwnProperty(prop.key.name) &&\n        STATIC_KEY != prop.key.name &&\n        !filterDefaultPropsField(prop) &&\n        !filterGetInitialStateField(prop) &&\n        !isFunctionExpression(prop) &&\n        !isPrimProperty(prop) &&\n        !isPrimPropertyWithTypeAnnotation(prop) &&\n        MIXIN_KEY != prop.key.name\n      )\n    ));\n\n    if (invalidProperties.length) {\n      const invalidText = invalidProperties\n        .map(prop => prop.key.name ? prop.key.name : prop.key)\n        .join(', ');\n      console.warn(\n        file.path + ': `' + ReactUtils.directlyGetComponentName(classPath) + '` ' +\n        'was skipped because of invalid field(s) `' + invalidText + '` on ' +\n        'the React component. Remove any right-hand-side expressions that ' +\n        'are not simple, like: `componentWillUpdate: createWillUpdate()` or ' +\n        '`render: foo ? renderA : renderB`.'\n      );\n    }\n    return !invalidProperties.length;\n  };\n\n  const areMixinsConvertible = (mixinIdentifierNames, classPath) => {\n    if (\n      ReactUtils.directlyHasMixinsField(classPath) &&\n      !ReactUtils.directlyHasSpecificMixins(classPath, mixinIdentifierNames)\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  // ---------------------------------------------------------------------------\n  // Collectors\n  const pickReturnValueOrCreateIIFE = value => {\n    if (hasSingleReturnStatement(value)) {\n      return value.body.body[0].argument;\n    } else {\n      return j.callExpression(\n        value,\n        []\n      );\n    }\n  };\n\n  const createDefaultProps = prop =>\n    withComments(\n      j.property(\n        'init',\n        j.identifier(DEFAULT_PROPS_KEY),\n        pickReturnValueOrCreateIIFE(prop.value)\n      ),\n      prop\n    );\n\n  // Collects `childContextTypes`, `contextTypes`, `displayName`, and `propTypes`;\n  // simplifies `getDefaultProps` or converts it to an IIFE;\n  // and collects everything else in the `statics` property object.\n  const collectStatics = specPath => {\n    const result = [];\n\n    for (let i = 0; i < specPath.properties.length; i++) {\n      const property = specPath.properties[i];\n      if (createFindPropFn('statics')(property) && property.value && property.value.properties) {\n        result.push(...property.value.properties);\n      } else if (createFindPropFn(DEFAULT_PROPS_FIELD)(property)) {\n        result.push(createDefaultProps(property));\n      } else if (property.key && STATIC_KEYS.hasOwnProperty(property.key.name)) {\n        result.push(property);\n      }\n    }\n\n    return result;\n  };\n\n  const collectNonStaticProperties = specPath => specPath.properties\n    .filter(prop =>\n      !(filterDefaultPropsField(prop) || filterGetInitialStateField(prop))\n    )\n    .filter(prop => (!STATIC_KEYS.hasOwnProperty(prop.key.name)) && prop.key.name !== STATIC_KEY)\n    .filter(prop =>\n      isFunctionExpression(prop) ||\n      isPrimPropertyWithTypeAnnotation(prop) ||\n      isPrimProperty(prop)\n    );\n\n  const findRequirePathAndBinding = (moduleName) => {\n    let result = null;\n\n    const requireCall = root.find(j.VariableDeclarator, {\n      id: {type: 'Identifier'},\n      init: {\n        callee: {name: 'require'},\n        arguments: [{value: moduleName}],\n      },\n    });\n\n    const importStatement = root.find(j.ImportDeclaration, {\n      source: {\n        value: moduleName,\n      },\n    });\n\n    if (importStatement.size()) {\n      importStatement.forEach(path => {\n        result = {\n          path,\n          binding: path.value.specifiers[0].id.name,\n          type: 'import',\n        };\n      });\n    } else if (requireCall.size()) {\n      requireCall.forEach(path => {\n        result = {\n          path,\n          binding: path.value.id.name,\n          type: 'require',\n        };\n      });\n    }\n\n    return result;\n  };\n\n  const pureRenderMixinPathAndBinding = findRequirePathAndBinding(PURE_MIXIN_MODULE_NAME);\n\n  // ---------------------------------------------------------------------------\n  // Boom!\n  const createMethodDefinition = fn =>\n    withComments(j.methodDefinition(\n      'method',\n      fn.key,\n      fn.value\n    ), fn);\n\n  const updatePropsAndContextAccess = getInitialState => {\n    const collection = j(getInitialState);\n\n    collection.find(j.MemberExpression, {\n      object: {\n        type: 'ThisExpression',\n      },\n      property: {\n        type: 'Identifier',\n        name: 'props',\n      },\n    }).forEach(path => j(path).replaceWith(j.identifier('props')));\n\n    collection.find(j.MemberExpression, {\n      object: {\n        type: 'ThisExpression',\n      },\n      property: {\n        type: 'Identifier',\n        name: 'context',\n      },\n    }).forEach(path => j(path).replaceWith(j.identifier('context')));\n  };\n\n\n  const inlineGetInitialState = getInitialState => {\n    const functionExpressionCollection = j(getInitialState.value);\n\n    // at this point if there exists bindings like `const props = ...`, we\n    // already know the RHS must be `this.props` (see `isGetInitialStateConstructorSafe`)\n    // so it's safe to just remove them\n    functionExpressionCollection.find(j.VariableDeclarator, {id: {name: 'props'}})\n      .forEach(path => j(path).remove());\n\n    functionExpressionCollection.find(j.VariableDeclarator, {id: {name: 'context'}})\n      .forEach(path => j(path).remove());\n\n    return functionExpressionCollection\n      .find(j.ReturnStatement)\n      .filter(path => {\n        // filter out inner function declarations here (helper functions, promises, etc.).\n        const mainBodyCollection = j(getInitialState.value.body);\n        return (\n          mainBodyCollection\n            .find(j.ArrowFunctionExpression)\n            .find(j.ReturnStatement, path.value)\n            .size() === 0 &&\n          mainBodyCollection\n            .find(j.FunctionDeclaration)\n            .find(j.ReturnStatement, path.value)\n            .size() === 0 &&\n          mainBodyCollection\n            .find(j.FunctionExpression)\n            .find(j.ReturnStatement, path.value)\n            .size() === 0\n        );\n      })\n      .forEach(path => {\n        let shouldInsertReturnAfterAssignment = false;\n\n        // if the return statement is not a direct child of getInitialState's body\n        if (getInitialState.value.body.body.indexOf(path.value) === -1) {\n          shouldInsertReturnAfterAssignment = true;\n        }\n\n        j(path).replaceWith(j.expressionStatement(\n          j.assignmentExpression(\n            '=',\n            j.memberExpression(\n              j.thisExpression(),\n              j.identifier('state'),\n              false\n            ),\n            path.value.argument\n          )\n        ));\n\n        if (shouldInsertReturnAfterAssignment) {\n          j(path).insertAfter(j.returnStatement(null));\n        }\n      }).getAST()[0].value.body.body;\n  };\n\n  const convertInitialStateToClassProperty = getInitialState =>\n    withComments(j.classProperty(\n      j.identifier('state'),\n      pickReturnValueOrCreateIIFE(getInitialState.value),\n      getInitialState.value.returnType,\n      false\n    ), getInitialState);\n\n  const createConstructorArgs = (hasContextAccess) => {\n    if (hasContextAccess) {\n      return [j.identifier('props'), j.identifier('context')];\n    }\n\n    return [j.identifier('props')];\n  };\n\n  const createConstructor = (getInitialState) => {\n    const initialStateAST = j(getInitialState);\n    let hasContextAccess = false;\n\n    if (\n      initialStateAST.find(j.MemberExpression, { // has `this.context` access\n        object: {type: 'ThisExpression'},\n        property: {type: 'Identifier', name: 'context'},\n      }).size() ||\n      initialStateAST.find(j.CallExpression, { // a direct method call `this.x()`\n        callee: {\n          type: 'MemberExpression',\n          object: {type: 'ThisExpression'},\n        },\n      }).size() ||\n      initialStateAST.find(j.MemberExpression, { // `this` is referenced alone\n        object: {type: 'ThisExpression'},\n      }).size() !== initialStateAST.find(j.ThisExpression).size()\n    ) {\n      hasContextAccess = true;\n    }\n\n    updatePropsAndContextAccess(getInitialState);\n    const constructorArgs = createConstructorArgs(hasContextAccess);\n\n    return [\n      createMethodDefinition({\n        key: j.identifier('constructor'),\n        value: j.functionExpression(\n          null,\n          constructorArgs,\n          j.blockStatement(\n            [].concat(\n              [\n                j.expressionStatement(\n                  j.callExpression(\n                    j.identifier('super'),\n                    constructorArgs\n                  )\n                ),\n              ],\n              inlineGetInitialState(getInitialState)\n            )\n          )\n        ),\n      }),\n    ];\n  };\n\n  const createArrowFunctionExpression = fn => {\n    const arrowFunc = j.arrowFunctionExpression(\n      fn.params,\n      fn.body,\n      false\n    );\n\n    arrowFunc.returnType = fn.returnType;\n    arrowFunc.defaults = fn.defaults;\n    arrowFunc.rest = fn.rest;\n    arrowFunc.async = fn.async;\n    arrowFunc.generator = fn.generator;\n\n    return arrowFunc;\n  };\n\n  const createArrowProperty = prop =>\n    withComments(j.classProperty(\n      j.identifier(prop.key.name),\n      createArrowFunctionExpression(prop.value),\n      null,\n      false\n    ), prop);\n\n  const createClassProperty = prop =>\n    withComments(j.classProperty(\n      j.identifier(prop.key.name),\n      prop.value,\n      null,\n      false\n    ), prop);\n\n  const createClassPropertyWithType = prop =>\n    withComments(j.classProperty(\n      j.identifier(prop.key.name),\n      prop.value.expression,\n      prop.value.typeAnnotation,\n      false\n    ), prop);\n\n  // ---------------------------------------------------------------------------\n  // Flow!\n\n  const flowAnyType = j.anyTypeAnnotation();\n  const flowFixMeType = j.genericTypeAnnotation(\n    j.identifier('$FlowFixMe'),\n    null\n  );\n\n  const literalToFlowType = node => {\n    if (node.type === 'Identifier' && node.name === 'undefined') {\n      return j.voidTypeAnnotation();\n    }\n\n    switch (typeof node.value) {\n      case 'string':\n        return j.stringLiteralTypeAnnotation(node.value, node.raw);\n      case 'number':\n        return j.numberLiteralTypeAnnotation(node.value, node.raw);\n      case 'boolean':\n        return j.booleanLiteralTypeAnnotation(node.value, node.raw);\n      case 'object': // we already know it's a NullLiteral here\n        return j.nullLiteralTypeAnnotation();\n      default: // this should never happen\n        return flowFixMeType;\n    }\n  };\n\n  const propTypeToFlowMapping = {\n    // prim types\n    any: flowAnyType,\n    array: j.genericTypeAnnotation(\n      j.identifier('Array'),\n      j.typeParameterInstantiation([flowFixMeType])\n    ),\n    bool: j.booleanTypeAnnotation(),\n    element: flowFixMeType, // flow does the same for `element` type in `propTypes`\n    func: j.genericTypeAnnotation(\n      j.identifier('Function'),\n      null\n    ),\n    node: flowFixMeType, // flow does the same for `node` type in `propTypes`\n    number: j.numberTypeAnnotation(),\n    object: j.genericTypeAnnotation(\n      j.identifier('Object'),\n      null\n    ),\n    string: j.stringTypeAnnotation(),\n\n    // type classes\n    arrayOf: (type) => j.genericTypeAnnotation(\n      j.identifier('Array'),\n      j.typeParameterInstantiation([type])\n    ),\n    instanceOf: (type) => j.genericTypeAnnotation(\n      type,\n      null\n    ),\n    objectOf: (type) => j.objectTypeAnnotation([], [\n      j.objectTypeIndexer(\n        j.identifier('key'),\n        j.stringTypeAnnotation(),\n        type\n      )\n    ]),\n    oneOf: (typeList) => j.unionTypeAnnotation(typeList),\n    oneOfType: (typeList) => j.unionTypeAnnotation(typeList),\n    shape: (propList) => j.objectTypeAnnotation(propList),\n  };\n\n  const propTypeToFlowAnnotation = val => {\n    let cursor = val;\n    let isOptional = true;\n    let typeResult = flowFixMeType;\n\n    if ( // check `.isRequired` first\n      cursor.type === 'MemberExpression' &&\n      cursor.property.type === 'Identifier' &&\n      cursor.property.name === 'isRequired'\n    ) {\n      isOptional = false;\n      cursor = cursor.object;\n    }\n\n    switch (cursor.type) {\n      case 'CallExpression': { // type class\n        const calleeName = cursor.callee.type === 'MemberExpression' ?\n          cursor.callee.property.name :\n          cursor.callee.name;\n\n        const constructor = propTypeToFlowMapping[calleeName];\n        if (!constructor) { // unknown type class\n          // it's not necessary since `typeResult` defaults to `flowFixMeType`,\n          // but it's more explicit this way\n          typeResult = flowFixMeType;\n          break;\n        }\n\n        switch (cursor.callee.property.name) {\n          case 'arrayOf': {\n            const arg = cursor.arguments[0];\n            typeResult = constructor(\n              propTypeToFlowAnnotation(arg)[0]\n            );\n            break;\n          }\n          case 'instanceOf': {\n            const arg = cursor.arguments[0];\n            if (arg.type !== 'Identifier') {\n              typeResult = flowFixMeType;\n              break;\n            }\n\n            typeResult = constructor(arg);\n            break;\n          }\n          case 'objectOf': {\n            const arg = cursor.arguments[0];\n            typeResult = constructor(\n              propTypeToFlowAnnotation(arg)[0]\n            );\n            break;\n          }\n          case 'oneOf': {\n            const argList = cursor.arguments[0].elements;\n            if (\n              !argList ||\n              !argList.every(node =>\n                (node.type === 'Literal') ||\n                (node.type === 'Identifier' && node.name === 'undefined')\n              )\n            ) {\n              typeResult = flowFixMeType;\n            } else {\n              typeResult = constructor(\n                argList.map(literalToFlowType)\n              );\n            }\n            break;\n          }\n          case 'oneOfType': {\n            const argList = cursor.arguments[0].elements;\n            if (!argList) {\n              typeResult = flowFixMeType;\n            } else {\n              typeResult = constructor(\n                argList.map(arg => propTypeToFlowAnnotation(arg)[0])\n              );\n            }\n            break;\n          }\n          case 'shape': {\n            const rawPropList = cursor.arguments[0].properties;\n            if (!rawPropList) {\n              typeResult = flowFixMeType;\n              break;\n            }\n            const flowPropList = [];\n            rawPropList.forEach(typeProp => {\n              const keyIsLiteral = typeProp.key.type === 'Literal';\n              const name = keyIsLiteral ? typeProp.key.value : typeProp.key.name;\n\n              const [valueType, isOptional] = propTypeToFlowAnnotation(typeProp.value);\n              flowPropList.push(j.objectTypeProperty(\n                keyIsLiteral ? j.literal(name) : j.identifier(name),\n                valueType,\n                isOptional\n              ));\n            });\n\n            typeResult = constructor(flowPropList);\n            break;\n          }\n          default: {\n            break;\n          }\n        }\n        break;\n      }\n      case 'MemberExpression': { // prim type\n        if (cursor.property.type !== 'Identifier') { // unrecognizable\n          typeResult = flowFixMeType;\n          break;\n        }\n\n        const maybeType = propTypeToFlowMapping[cursor.property.name];\n        if (maybeType) {\n          typeResult = propTypeToFlowMapping[cursor.property.name];\n        } else { // type not found\n          typeResult = flowFixMeType;\n        }\n\n        break;\n      }\n      default: { // unrecognizable\n        break;\n      }\n    }\n\n    return [typeResult, isOptional];\n  };\n\n  const createFlowAnnotationsFromPropTypesProperties = (prop) => {\n    const typePropertyList = [];\n\n    if (!prop || prop.value.type !== 'ObjectExpression') {\n      return typePropertyList;\n    }\n\n    prop.value.properties.forEach(typeProp => {\n      if (!typeProp.key) { // stuff like SpreadProperty\n        return;\n      }\n\n      const keyIsLiteral = typeProp.key.type === 'Literal';\n      const name = keyIsLiteral ? typeProp.key.value : typeProp.key.name;\n\n      const [valueType, isOptional] = propTypeToFlowAnnotation(typeProp.value);\n      typePropertyList.push(j.objectTypeProperty(\n        keyIsLiteral ? j.literal(name) : j.identifier(name),\n        valueType,\n        isOptional\n      ));\n    });\n\n    return j.classProperty(\n      j.identifier('props'),\n      null,\n      j.typeAnnotation(j.objectTypeAnnotation(typePropertyList)),\n      false\n    );\n  };\n\n  // to ensure that our property initializers' evaluation order is safe\n  const repositionStateProperty = (initialStateProperty, propertiesAndMethods) => {\n    const initialStateCollection = j(initialStateProperty);\n    const thisCount = initialStateCollection.find(j.ThisExpression).size();\n    const safeThisMemberCount = initialStateCollection.find(j.MemberExpression, {\n      object: {\n        type: 'ThisExpression',\n      },\n      property: {\n        type: 'Identifier',\n        name: 'props',\n      },\n    }).size() + initialStateCollection.find(j.MemberExpression, {\n      object: {\n        type: 'ThisExpression',\n      },\n      property: {\n        type: 'Identifier',\n        name: 'context',\n      },\n    }).size();\n\n    if (thisCount === safeThisMemberCount) {\n      return initialStateProperty.concat(propertiesAndMethods);\n    }\n\n    const result = [].concat(propertiesAndMethods);\n    let lastPropPosition = result.length - 1;\n\n    while (lastPropPosition >= 0 && result[lastPropPosition].kind === 'method') {\n      lastPropPosition--;\n    }\n\n    result.splice(lastPropPosition + 1, 0, initialStateProperty[0]);\n    return result;\n  };\n\n  // if there's no `getInitialState` or the `getInitialState` function is simple\n  // (i.e., it's just a return statement) then we don't need a constructor.\n  // we can simply lift `state = {...}` as a property initializer.\n  // otherwise, create a constructor and inline `this.state = ...`.\n  //\n  // when we need to create a constructor, we only put `context` as the\n  // second parameter when the following things happen in `getInitialState()`:\n  // 1. there's a `this.context` access, or\n  // 2. there's a direct method call `this.x()`, or\n  // 3. `this` is referenced alone\n  const createESClass = (\n    name,\n    baseClassName,\n    staticProperties,\n    getInitialState,\n    rawProperties,\n    comments\n  ) => {\n    const initialStateProperty = [];\n    let maybeConstructor = [];\n    let maybeFlowStateAnnotation = []; // we only need this when we do `this.state = ...`\n\n    if (isInitialStateLiftable(getInitialState)) {\n      if (getInitialState) {\n        initialStateProperty.push(convertInitialStateToClassProperty(getInitialState));\n      }\n    } else {\n      maybeConstructor = createConstructor(getInitialState);\n      if (shouldTransformFlow) {\n        let stateType = j.typeAnnotation(\n          j.existsTypeAnnotation()\n        );\n\n        if (getInitialState.value.returnType) {\n          stateType = getInitialState.value.returnType;\n        }\n\n        maybeFlowStateAnnotation.push(j.classProperty(\n          j.identifier('state'),\n          null,\n          stateType,\n          false\n        ));\n      }\n    }\n\n    const propertiesAndMethods = rawProperties.map(prop => {\n      if (isPrimPropertyWithTypeAnnotation(prop)) {\n        return createClassPropertyWithType(prop);\n      } else if (isPrimProperty(prop)) {\n        return createClassProperty(prop);\n      } else if (AUTOBIND_IGNORE_KEYS.hasOwnProperty(prop.key.name)) {\n        return createMethodDefinition(prop);\n      }\n\n      return createArrowProperty(prop);\n    });\n\n    const flowPropsAnnotation = shouldTransformFlow ?\n      createFlowAnnotationsFromPropTypesProperties(\n        staticProperties.find((path) => path.key.name === 'propTypes')\n      ) :\n      [];\n\n    let finalStaticProperties = staticProperties;\n\n    if (shouldTransformFlow && options['remove-runtime-proptypes']) {\n      finalStaticProperties = staticProperties.filter((prop) => prop.key.name !== 'propTypes');\n    }\n\n    return withComments(j.classDeclaration(\n      name ? j.identifier(name) : null,\n      j.classBody(\n        [].concat(\n          flowPropsAnnotation,\n          maybeFlowStateAnnotation,\n          finalStaticProperties,\n          maybeConstructor,\n          repositionStateProperty(initialStateProperty, propertiesAndMethods)\n        )\n      ),\n      j.memberExpression(\n        j.identifier('React'),\n        j.identifier(baseClassName),\n        false\n      )\n    ), {comments});\n  };\n\n  const createStaticClassProperty = staticProperty => {\n    if (staticProperty.value.type === 'FunctionExpression') {\n      return withComments(j.methodDefinition(\n        'method',\n        j.identifier(staticProperty.key.name),\n        staticProperty.value,\n        true\n      ), staticProperty);\n    }\n\n    if (staticProperty.value.type === 'TypeCastExpression') {\n      return withComments(j.classProperty(\n        j.identifier(staticProperty.key.name),\n        staticProperty.value.expression,\n        staticProperty.value.typeAnnotation,\n        true\n      ), staticProperty);\n    }\n\n    return withComments(j.classProperty(\n      j.identifier(staticProperty.key.name),\n      staticProperty.value,\n      null,\n      true\n    ), staticProperty);\n  };\n\n  const createStaticClassProperties = statics =>\n    statics.map(createStaticClassProperty);\n\n  const getComments = classPath => {\n    if (classPath.value.comments) {\n      return classPath.value.comments;\n    }\n    const declaration = j(classPath).closest(j.VariableDeclaration);\n    if (declaration.size()) {\n      return declaration.get().value.comments;\n    }\n    return null;\n  };\n\n  const findUnusedVariables = (path, varName) => j(path)\n    .closestScope()\n    .find(j.Identifier, {name: varName})\n    // Ignore require vars\n    .filter(identifierPath => identifierPath.value !== path.value.id)\n    // Ignore import bindings\n    .filter(identifierPath => !(\n      path.value.type === 'ImportDeclaration' &&\n      path.value.specifiers.some(specifier => specifier.id === identifierPath.value)\n    ))\n    // Ignore properties in MemberExpressions\n    .filter(identifierPath => {\n      const parent = identifierPath.parent.value;\n      return !(\n        j.MemberExpression.check(parent) &&\n        parent.property === identifierPath.value\n      );\n    });\n\n  const updateToClass = (classPath) => {\n    const specPath = ReactUtils.directlyGetCreateClassSpec(classPath);\n    const name = ReactUtils.directlyGetComponentName(classPath);\n    const statics = collectStatics(specPath);\n    const properties = collectNonStaticProperties(specPath);\n    const comments = getComments(classPath);\n\n    const getInitialState = findGetInitialState(specPath);\n\n    var path = classPath;\n\n    if (\n      classPath.parentPath &&\n      classPath.parentPath.value &&\n      classPath.parentPath.value.type === 'VariableDeclarator'\n    ) {\n      // the reason that we need to do this awkward dance here is that\n      // for things like `var Foo = React.createClass({...})`, we need to\n      // replace the _entire_ VariableDeclaration with\n      // `class Foo extends React.Component {...}`.\n      // it looks scary but since we already know it's a VariableDeclarator\n      // it's actually safe.\n      // (VariableDeclaration > declarations > VariableDeclarator > CallExpression)\n      path = classPath.parentPath.parentPath.parentPath;\n    }\n\n    const staticProperties = createStaticClassProperties(statics);\n    const baseClassName =\n      pureRenderMixinPathAndBinding &&\n      ReactUtils.directlyHasSpecificMixins(classPath, [pureRenderMixinPathAndBinding.binding]) ?\n        'PureComponent' :\n        'Component';\n\n    j(path).replaceWith(\n      createESClass(\n        name,\n        baseClassName,\n        staticProperties,\n        getInitialState,\n        properties,\n        comments\n      )\n    );\n  };\n\n  if (\n    options['explicit-require'] === false || ReactUtils.hasReact(root)\n  ) {\n    // no mixins found on the classPath -> true\n    // pure mixin identifier not found -> (has mixins) -> false\n    // found pure mixin identifier ->\n    //   class mixins is an array and only contains the identifier -> true\n    //   otherwise -> false\n    const mixinsFilter = (classPath) => {\n      if (!ReactUtils.directlyHasMixinsField(classPath)) {\n        return true;\n      } else if (options['pure-component'] && pureRenderMixinPathAndBinding) {\n        const {binding} = pureRenderMixinPathAndBinding;\n        if (areMixinsConvertible([binding], classPath)) {\n          return true;\n        }\n      }\n      console.warn(\n        file.path + ': `' + ReactUtils.directlyGetComponentName(classPath) + '` ' +\n        'was skipped because of inconvertible mixins.'\n      );\n\n      return false;\n    };\n\n    // the only time that we can't simply replace the createClass call path\n    // with a new class is when the parent of that is a variable declaration.\n    // let's delay it and figure it out later (by looking at `path.parentPath`)\n    // in `updateToClass`.\n    const apply = (path) =>\n      path\n        .filter(mixinsFilter)\n        .filter(hasNoCallsToDeprecatedAPIs)\n        .filter(hasNoRefsToAPIsThatWillBeRemoved)\n        .filter(doesNotUseArguments)\n        .filter(isInitialStateConvertible)\n        .filter(canConvertToClass)\n        .forEach(updateToClass);\n\n    const didTransform = apply(\n      ReactUtils.findAllReactCreateClassCalls(root)\n    ).size() > 0;\n\n    if (didTransform) {\n      // prune removed requires\n      if (pureRenderMixinPathAndBinding) {\n        const {binding, path, type} = pureRenderMixinPathAndBinding;\n        let shouldReinsertComment = false;\n        if (findUnusedVariables(path, binding).size() === 0) {\n          var removePath = null;\n          if (type === 'require') {\n            const bodyNode = path.parentPath.parentPath.parentPath.value;\n            const variableDeclarationNode = path.parentPath.parentPath.value;\n\n            removePath = path.parentPath.parentPath;\n            shouldReinsertComment = bodyNode.indexOf(variableDeclarationNode) === 0;\n          } else {\n            const importDeclarationNode = path.value;\n            const bodyNode = path.parentPath.value;\n\n            removePath = path;\n            shouldReinsertComment = bodyNode.indexOf(importDeclarationNode) === 0;\n          }\n\n          j(removePath).remove();\n          if (shouldReinsertComment) {\n            root.get().node.comments = topComments;\n          }\n        }\n      }\n\n      return root.toSource(printOptions);\n    }\n  }\n\n  return null;\n};\n\nmodule.exports.parser = 'flow';\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/create-element-to-jsx.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nmodule.exports = function(file, api, options) {\n  const j = api.jscodeshift;\n  const root = j(file.source);\n  const ReactUtils = require('./utils/ReactUtils')(j);\n  const encodeJSXTextValue = value =>\n    value\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n\n  const convertExpressionToJSXAttributes = (expression) => {\n    if (!expression) {\n      return {\n        attributes: [],\n        extraComments: [],\n      };\n    }\n\n    const isReactSpread = expression.type === 'CallExpression' &&\n      expression.callee.type === 'MemberExpression' &&\n      expression.callee.object.name === 'React' &&\n      expression.callee.property.name === '__spread';\n\n    const isObjectAssign = expression.type === 'CallExpression' &&\n      expression.callee.type === 'MemberExpression' &&\n      expression.callee.object.name === 'Object' &&\n      expression.callee.property.name === 'assign';\n\n    const validSpreadTypes = [\n      'Identifier',\n      'MemberExpression',\n      'CallExpression',\n    ];\n\n    if (isReactSpread || isObjectAssign) {\n      const resultAttributes = [];\n      const resultExtraComments = expression.comments || [];\n      const {callee} = expression;\n      for (const node of [callee, callee.object, callee.property]) {\n        resultExtraComments.push(...(node.comments || []));\n      }\n      expression.arguments.forEach((expression) => {\n        const {attributes, extraComments} = convertExpressionToJSXAttributes(expression);\n        resultAttributes.push(...attributes);\n        resultExtraComments.push(...extraComments);\n      });\n\n      return {\n        attributes: resultAttributes,\n        extraComments: resultExtraComments,\n      };\n    } else if (validSpreadTypes.indexOf(expression.type) != -1) {\n      return {\n        attributes: [j.jsxSpreadAttribute(expression)],\n        extraComments: [],\n      };\n    } else if (expression.type === 'ObjectExpression') {\n      const attributes = expression.properties.map((property) => {\n        if (property.type === 'SpreadProperty') {\n          const spreadAttribute = j.jsxSpreadAttribute(property.argument);\n          spreadAttribute.comments = property.comments;\n          return spreadAttribute;\n        } else if (property.type === 'Property') {\n          const propertyValueType = property.value.type;\n\n          let value;\n          if (propertyValueType === 'Literal' && typeof property.value.value === 'string') {\n            value = j.literal(property.value.value);\n            value.comments = property.value.comments;\n          } else {\n            value = j.jsxExpressionContainer(property.value);\n          }\n\n          let jsxIdentifier;\n          if (property.key.type === 'Literal') {\n            jsxIdentifier = j.jsxIdentifier(property.key.value);\n          } else {\n            jsxIdentifier = j.jsxIdentifier(property.key.name);\n          }\n          jsxIdentifier.comments = property.key.comments;\n\n          const jsxAttribute = j.jsxAttribute(\n            jsxIdentifier,\n            value\n          );\n          jsxAttribute.comments = property.comments;\n          return jsxAttribute;\n        }\n        return null;\n      });\n\n      return {\n        attributes,\n        extraComments: expression.comments || [],\n      };\n    } else if (expression.type === 'Literal' && expression.value === null) {\n      return {\n        attributes: [],\n        extraComments: expression.comments || [],\n      }\n    } else {\n      throw new Error(`Unexpected attribute of type \"${expression.type}\"`);\n    }\n  };\n\n  const jsxIdentifierFor = node => {\n    let identifier;\n    if (node.type === 'Literal') {\n      identifier = j.jsxIdentifier(node.value);\n    } else if (node.type === 'MemberExpression') {\n      identifier = j.jsxMemberExpression(\n        jsxIdentifierFor(node.object),\n        jsxIdentifierFor(node.property)\n      );\n    } else {\n      identifier = j.jsxIdentifier(node.name);\n    }\n    identifier.comments = node.comments;\n    return identifier;\n  };\n\n  const convertNodeToJSX = (node) => {\n    const comments = node.value.comments;\n    const {callee} = node.value;\n    for (const calleeNode of [callee, callee.object, callee.property]) {\n      for (const comment of calleeNode.comments || []) {\n        comment.leading = true;\n        comment.trailing = false;\n        comments.push(comment);\n      }\n    }\n\n    const args = node.value.arguments;\n\n    const jsxIdentifier = jsxIdentifierFor(args[0]);\n    const props = args[1];\n\n    const {attributes, extraComments} = convertExpressionToJSXAttributes(props);\n    jsxIdentifier.comments = jsxIdentifier.comments || [];\n    for (const comment of extraComments) {\n      comment.leading = false;\n      comment.trailing = true;\n      jsxIdentifier.comments.push(comment);\n    }\n\n    const children = args.slice(2).map((child, index) => {\n      if (child.type === 'Literal' && typeof child.value === 'string' && !child.comments) {\n        return j.jsxText(encodeJSXTextValue(child.value));\n      } else if (child.type === 'CallExpression' &&\n        child.callee.object &&\n        child.callee.object.name === 'React' &&\n        child.callee.property.name === 'createElement') {\n        const jsxChild = convertNodeToJSX(node.get('arguments', index + 2));\n        if ((jsxChild.comments || []).length > 0) {\n          return j.jsxExpressionContainer(jsxChild);\n        } else {\n          return jsxChild;\n        }\n      } else {\n        return j.jsxExpressionContainer(child);\n      }\n    });\n\n    const openingElement = j.jsxOpeningElement(jsxIdentifier, attributes);\n\n    if (children.length) {\n      const endIdentifier = Object.assign({}, jsxIdentifier, {comments: []});\n      const element = j.jsxElement(\n        openingElement,\n        j.jsxClosingElement(endIdentifier),\n        children\n      );\n      element.comments = comments;\n      return element;\n    } else {\n      openingElement.selfClosing = true;\n      const element = j.jsxElement(openingElement);\n      element.comments = comments;\n      return element;\n    }\n  };\n\n  if (\n    options['explicit-require'] === false ||\n    ReactUtils.hasReact(root)\n  ) {\n    const mutations = root\n      .find(j.CallExpression, {\n        callee: {\n          object: {\n            name: 'React',\n          },\n          property: {\n            name: 'createElement',\n          },\n        },\n      })\n      .replaceWith(convertNodeToJSX)\n      .size();\n\n    if (mutations) {\n      return root.toSource();\n    }\n  }\n\n  return null;\n};\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/findDOMNode.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nfunction getDOMNodeToFindDOMNode(file, api, options) {\n  const j = api.jscodeshift;\n\n  require('./utils/array-polyfills');\n  const ReactUtils = require('./utils/ReactUtils')(j);\n\n  const printOptions =\n    options.printOptions || {quote: 'single', trailingComma: true};\n  const root = j(file.source);\n\n  const createReactFindDOMNodeCall = arg => j.callExpression(\n    j.memberExpression(\n      j.identifier('React'),\n      j.identifier('findDOMNode'),\n      false\n    ),\n    [arg]\n  );\n\n  const updateRefCall = (path, refName) => {\n    j(path)\n      .find(j.CallExpression, {\n        callee: {\n          object: {\n            type: 'Identifier',\n            name: refName,\n          },\n          property: {\n            type: 'Identifier',\n            name: 'getDOMNode',\n          },\n        },\n      })\n      .forEach(callPath => j(callPath).replaceWith(\n        createReactFindDOMNodeCall(j.identifier(refName))\n      ));\n  };\n\n  const updateToFindDOMNode = classPath => {\n    var sum = 0;\n\n    // this.getDOMNode()\n    sum += j(classPath)\n      .find(j.CallExpression, {\n        callee: {\n          object: {\n            type: 'ThisExpression',\n          },\n          property: {\n            type: 'Identifier',\n            name: 'getDOMNode',\n          },\n        },\n      })\n      .forEach(path => j(path).replaceWith(\n        createReactFindDOMNodeCall(j.thisExpression())\n      ))\n      .size();\n\n    // this.refs.xxx.getDOMNode() or this.refs.xxx.refs.yyy.getDOMNode()\n    sum += j(classPath)\n      .find(j.MemberExpression, {\n        object: {\n          type: 'MemberExpression',\n          object: {\n            type: 'MemberExpression',\n            object: {\n              type: 'ThisExpression',\n            },\n            property: {\n              type: 'Identifier',\n              name: 'refs',\n            },\n          },\n        },\n      })\n      .closest(j.CallExpression)\n      .filter(path => (\n        path.value.callee.property &&\n        path.value.callee.property.type === 'Identifier' &&\n        path.value.callee.property.name === 'getDOMNode'\n      ))\n      .forEach(path => j(path).replaceWith(\n        createReactFindDOMNodeCall(path.value.callee.object)\n      ))\n      .size();\n\n    // someVariable.getDOMNode() wherre `someVariable = this.refs.xxx`\n    sum += j(classPath)\n      .findVariableDeclarators()\n      .filter(path => {\n        const init = path.value.init;\n        const value = init && init.object;\n        return (\n          value &&\n          value.type === 'MemberExpression' &&\n          value.object &&\n          value.object.type === 'ThisExpression' &&\n          value.property &&\n          value.property.type === 'Identifier' &&\n          value.property.name === 'refs' &&\n          init.property &&\n          init.property.type === 'Identifier'\n        );\n      })\n      .forEach(path => j(path)\n        .closest(j.FunctionExpression)\n        .forEach(fnPath => updateRefCall(fnPath, path.value.id.name))\n      )\n      .size();\n\n    return sum > 0;\n  };\n\n  if (\n    options['explicit-require'] === false ||\n    ReactUtils.hasReact(root)\n  ) {\n    const apply = (path) =>\n      path.filter(updateToFindDOMNode);\n\n    const didTransform = (\n      apply(ReactUtils.findReactCreateClass(root)).size() +\n      apply(ReactUtils.findReactCreateClassModuleExports(root)).size() +\n      apply(ReactUtils.findReactCreateClassExportDefault(root)).size()\n    ) > 0;\n\n    if (didTransform) {\n      return root.toSource(printOptions);\n    }\n  }\n\n  return null;\n}\n\nmodule.exports = getDOMNodeToFindDOMNode;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/manual-bind-to-arrow.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n/**\n * class Component extends React.Component {\n *   constructor() { this.onClick = this.onClick.bind(this); }\n *   onClick() { }\n * }\n *\n * -->\n *\n * class Component extends React.Component {\n *   onClick = () => { }\n * }\n */\n\nexport default function transformer(file, api) {\n  const j = api.jscodeshift;\n\n  var root = j(file.source);\n\n  // Helper functions to transform a method declaration to an arrow function\n  // By default recast drops comments and jscodeshift doesn't have a way to\n  // set the return type in the convenience method. Otherwise we would have\n  // inlined all those.\n  function withComments(to, from) {\n    to.comments = from.comments;\n    return to;\n  }\n\n  function createArrowFunctionExpression(fn) {\n    var arrowFunc = j.arrowFunctionExpression(\n      fn.params,\n      fn.body,\n      false\n    );\n\n    arrowFunc.returnType = fn.returnType;\n    arrowFunc.defaults = fn.defaults;\n    arrowFunc.rest = fn.rest;\n    arrowFunc.async = fn.async;\n\n    return arrowFunc;\n  }\n\n  function createArrowProperty(prop) {\n    return withComments(j.classProperty(\n      j.identifier(prop.key.name),\n      createArrowFunctionExpression(prop.value),\n      null,\n      false\n    ), prop);\n  }\n\n  var hasChanged = false;\n  var transform = root\n    .find(j.AssignmentExpression)\n    .forEach(path => {\n\n      // Check that the englobing function is constructor\n      var methodPath = path;\n      while (methodPath &&\n             (methodPath.node.type !== 'MethodDefinition' ||\n              methodPath.node.kind !== 'constructor')) {\n        methodPath = methodPath.parentPath;\n      }\n      if (!methodPath) {\n        return;\n      }\n\n      // Check that it looks like\n      // this.method = this.method.bind(this);\n      // or\n      // (this: any).method = this.method.bind(this);\n      // or\n      // self.method = this.method.bind(this);\n      if (!(\n        path.node.left.type === 'MemberExpression' &&\n        (\n          // this\n          path.node.left.object.type === 'ThisExpression' ||\n          // self\n          path.node.left.object.type === 'Identifier' &&\n          path.node.left.object.name === 'self' ||\n          // (this: any)\n          path.node.left.object.type === 'TypeCastExpression' &&\n          path.node.left.object.expression.type === 'ThisExpression'\n        ) &&\n        path.node.left.property.type === 'Identifier' &&\n        path.node.right.type === 'CallExpression' &&\n        path.node.right.callee.type === 'MemberExpression' &&\n        path.node.right.callee.property.type === 'Identifier' &&\n        path.node.right.callee.property.name === 'bind' &&\n        path.node.right.callee.object.type === 'MemberExpression' &&\n        path.node.right.callee.object.property.type === 'Identifier' &&\n        path.node.right.callee.object.object.type === 'ThisExpression' &&\n        path.node.left.property.name === path.node.right.callee.object.property.name &&\n        true\n      )) {\n        return;\n      }\n\n      // Find the method() declaration and replace it with an arrow function\n      var methodName = path.node.left.property.name;\n      var methods = root\n        .find(j.MethodDefinition)\n        .filter(path =>\n          path.node.key.type === 'Identifier' &&\n          path.node.key.name === methodName\n        );\n\n      // Do not remove the binding if there's no corresponding method to turn\n      // into an arrow function\n      if (methods.size() === 0) {\n        return;\n      }\n      methods\n        .replaceWith(path =>\n          createArrowProperty(path.node)\n        );\n\n      // Remove the line\n      // this.method = this.method.bind(this);\n      j(path.parentPath).remove();\n\n      var selfCount = j(methodPath)\n        .find(j.Identifier, {name: 'self'})\n        .size();\n      if (selfCount === 1) {\n        // Remove the line\n        // const self: any = this;\n        // If self is present somewhere else in the method, then it is\n        // not safe to do.\n        j(methodPath)\n          .find(j.VariableDeclaration)\n          .filter(path =>\n            j(path).find(j.Identifier, {name: 'self'}).size() === 1\n          )\n          .remove();\n      }\n\n      // If we delete everything from the constructor but the super() call,\n      // then delete the entire constructor.\n      var canDeleteConstructor = true;\n      methodPath.node.value.body.body.forEach(node => {\n        if (\n          !node ||\n          node.type === 'ExpressionStatement' &&\n          node.expression.type === 'CallExpression' &&\n          (\n            // babylon parser\n            node.expression.callee.type === 'Super' ||\n            // flow parser\n            node.expression.callee.type === 'Identifier' &&\n            node.expression.callee.name === 'super'\n          )\n        ) {\n          return;\n        }\n        canDeleteConstructor = false;\n      });\n      if (canDeleteConstructor) {\n        j(methodPath).remove();\n      }\n\n      hasChanged++;\n    });\n\n  if (hasChanged) {\n    return transform.toSource();\n  }\n  return null;\n}\n\n// module.exports.parser = 'flow';\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/pure-component.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nmodule.exports = function(file, api, options) {\n  const j = api.jscodeshift;\n  const ReactUtils = require('./utils/ReactUtils')(j);\n\n  const useArrows = options.useArrows || false;\n  const silenceWarnings = options.silenceWarnings || false;\n  const printOptions = options.printOptions || {\n    quote: 'single',\n    trailingComma: true,\n  };\n\n  const getClassName = path =>\n    path.node.id.name;\n\n  const isRenderMethod = node => (\n    node.type == 'MethodDefinition' &&\n    node.key.type == 'Identifier' &&\n    node.key.name == 'render'\n  );\n\n  const onlyHasRenderMethod = path =>\n    j(path)\n      .find(j.MethodDefinition)\n      .filter(p => !isRenderMethod(p.value))\n      .size() === 0;\n\n  const hasRefs = path =>\n    j(path)\n      .find(j.JSXAttribute, {\n        name: {\n          type: 'JSXIdentifier',\n          name: 'ref',\n        },\n      })\n      .size() > 0;\n\n  const THIS_PROPS = {\n    object: {\n      type: 'ThisExpression',\n    },\n    property: {\n      name: 'props',\n    },\n  };\n\n  const replaceThisProps = path =>\n    j(path)\n      .find(j.MemberExpression, THIS_PROPS)\n      .replaceWith(j.identifier('props'));\n\n  const buildPureComponentFunction = (name, body) =>\n    j.functionDeclaration(\n      j.identifier(name),\n      [j.identifier('props')],\n      body\n    );\n\n  const buildPureComponentArrowFunction = (name, body) =>\n    j.variableDeclaration(\n      'const', [\n        j.variableDeclarator(\n          j.identifier(name),\n          j.arrowFunctionExpression(\n            [j.identifier('props')],\n            body\n          )\n        ),\n      ]\n    );\n\n  const reportSkipped = path => {\n    const name = getClassName(path);\n    const fileName = file.path;\n    const {line, column} = path.value.loc.start;\n\n    console.warn(`Class \"${name}\" skipped in ${fileName} on ${line}:${column}`);\n  };\n\n  const f = j(file.source);\n\n  const pureClasses = ReactUtils.findReactES6ClassDeclaration(f)\n    .filter(path => {\n      const isPure = onlyHasRenderMethod(path) && !hasRefs(path);\n      if (!isPure && !silenceWarnings) {\n        reportSkipped(path);\n      }\n      return isPure;\n    });\n\n  if (pureClasses.size() === 0) {\n    return null;\n  }\n\n  pureClasses.replaceWith(p => {\n    const name = p.node.id.name;\n    const renderMethod = p.value.body.body.filter(isRenderMethod)[0];\n    const renderBody = renderMethod.value.body;\n\n    replaceThisProps(renderBody);\n\n    if (useArrows) {\n      return buildPureComponentArrowFunction(name, renderBody);\n    } else {\n      return buildPureComponentFunction(name, renderBody);\n    }\n  });\n\n  return f.toSource(printOptions);\n};\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/pure-render-mixin.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nfunction removePureRenderMixin(file, api, options) {\n  const j = api.jscodeshift;\n\n  require('./utils/array-polyfills');\n  const ReactUtils = require('./utils/ReactUtils')(j);\n\n  const printOptions =\n    options.printOptions || {quote: 'single', trailingComma: true};\n  const root = j(file.source);\n\n  const PURE_RENDER_MIXIN = options['mixin-name'] || 'PureRenderMixin';\n  const SHOULD_COMPONENT_UPDATE = 'shouldComponentUpdate';\n  const NEXT_PROPS = 'nextProps';\n  const NEXT_STATE = 'nextState';\n\n  // ---------------------------------------------------------------------------\n  // shouldComponentUpdate\n  const createShouldComponentUpdateFunction = () =>\n    j.functionExpression(\n      null,\n      [j.identifier(NEXT_PROPS), j.identifier(NEXT_STATE)],\n      j.blockStatement([\n        j.returnStatement(\n          j.callExpression(\n            j.memberExpression(\n              j.identifier('React'),\n              j.memberExpression(\n                j.identifier('addons'),\n                j.identifier('shallowCompare'),\n                false\n              ),\n              false\n            ),\n            [\n              j.thisExpression(),\n              j.identifier(NEXT_PROPS),\n              j.identifier(NEXT_STATE),\n            ]\n          )\n        ),\n      ])\n    );\n\n  const createShouldComponentUpdateProperty = () =>\n    j.property(\n      'init',\n      j.identifier(SHOULD_COMPONENT_UPDATE),\n      createShouldComponentUpdateFunction()\n    );\n\n  const hasShouldComponentUpdate = classPath =>\n    ReactUtils.getReactCreateClassSpec(classPath)\n      .properties.every(property =>\n        property.key.name !== SHOULD_COMPONENT_UPDATE\n      );\n\n  // ---------------------------------------------------------------------------\n  // Mixin related code\n  const isPureRenderMixin = node => (\n    node.type === 'Identifier' &&\n    node.name === PURE_RENDER_MIXIN\n  );\n\n  const hasPureRenderMixin = classPath => {\n    const spec = ReactUtils.getReactCreateClassSpec(classPath);\n    const mixin = spec && spec.properties.find(ReactUtils.isMixinProperty);\n    return mixin && mixin.value.elements.some(isPureRenderMixin);\n  };\n\n  const removeMixin = elements =>\n    j.property(\n      'init',\n      j.identifier('mixins'),\n      j.arrayExpression(\n        elements.filter(element => !isPureRenderMixin(element))\n      )\n    );\n\n  // ---------------------------------------------------------------------------\n  // Boom!\n  const insertShouldComponentUpdate = properties => {\n    const length = properties.length;\n    const lastProp = properties[length - 1];\n    // I wouldn't dare insert at the bottom if the last function is render\n    if (\n      lastProp.key.type === 'Identifier' &&\n      lastProp.key.name === 'render'\n    ) {\n      properties.splice(\n        length - 1,\n        1,\n        createShouldComponentUpdateProperty(),\n        lastProp\n      );\n    } else {\n      properties.push(createShouldComponentUpdateProperty());\n    }\n    return properties;\n  };\n\n  const cleanupReactComponent = classPath => {\n    const spec = ReactUtils.getReactCreateClassSpec(classPath);\n    const properties = spec.properties\n      .map(property => {\n        if (ReactUtils.isMixinProperty(property)) {\n          const elements = property.value.elements;\n          return (elements.length !== 1) ? removeMixin(elements) : null;\n        }\n        return property;\n      })\n      .filter(property => !!property);\n\n    ReactUtils.findReactCreateClassCallExpression(classPath).replaceWith(\n      ReactUtils.createCreateReactClassCallExpression(\n        insertShouldComponentUpdate(properties)\n      )\n    );\n  };\n\n  // Remove it if only two or fewer are left:\n  // var PureRenderMixin = React.addons.PureRenderMixin;\n  const hasPureRenderIdentifiers = path =>\n    path.find(j.Identifier, {\n      name: PURE_RENDER_MIXIN,\n    }).size() > 2;\n\n  const deletePureRenderMixin = path => {\n    if (hasPureRenderIdentifiers(path)) {\n      return;\n    }\n\n    const declaration = path\n      .findVariableDeclarators(PURE_RENDER_MIXIN)\n      .closest(j.VariableDeclaration);\n\n    if (declaration.size > 1) {\n      declaration.forEach(p =>\n        j(p).replaceWith(\n          j.variableDeclaration(\n            'var',\n            p.value.declarations.filter(isPureRenderMixin)\n          )\n        )\n      );\n    } else {\n      // Let's assume the variable declaration happens at the top level\n      const program = declaration.closest(j.Program).get();\n      const body = program.value.body;\n      const index = body.indexOf(declaration.get().value);\n      if (index !== -1) {\n        body.splice(index, 1);\n      }\n    }\n  };\n\n  if (\n    options['explicit-require'] === false ||\n    ReactUtils.hasReact(root)\n  ) {\n    const didTransform = ReactUtils\n      .findReactCreateClass(root)\n      .filter(hasPureRenderMixin)\n      .filter(hasShouldComponentUpdate)\n      .forEach(cleanupReactComponent)\n      .size() > 0;\n\n    if (didTransform) {\n      deletePureRenderMixin(root);\n      return root.toSource(printOptions);\n    }\n  }\n\n  return null;\n}\n\nmodule.exports = removePureRenderMixin;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/react-to-react-dom.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar CORE_PROPERTIES = [\n  'Children',\n  'Component',\n  'createElement',\n  'cloneElement',\n  'isValidElement',\n  'PropTypes',\n  'createClass',\n  'createFactory',\n  'createMixin',\n  'DOM',\n  '__spread',\n];\n\nvar DOM_PROPERTIES = [\n  'findDOMNode',\n  'render',\n  'unmountComponentAtNode',\n  'unstable_batchedUpdates',\n  'unstable_renderSubtreeIntoContainer',\n];\n\nvar DOM_SERVER_PROPERTIES = [\n  'renderToString',\n  'renderToStaticMarkup',\n];\n\nfunction reportError(node, error) {\n  throw new Error(\n    `At ${node.loc.start.line}:${node.loc.start.column}: ${error}`\n  );\n}\n\nfunction isRequire(path, moduleName) {\n  return (\n    path.value.type === 'CallExpression' &&\n    path.value.callee.type === 'Identifier' &&\n    path.value.callee.name === 'require' &&\n    path.value.arguments.length === 1 &&\n    path.value.arguments[0].type === 'Literal' &&\n    path.value.arguments[0].value === moduleName\n  );\n}\n\nmodule.exports = function(file, api) {\n  var j = api.jscodeshift;\n  var root = j(file.source);\n\n  [\n    ['React', 'ReactDOM', 'ReactDOMServer'],\n    ['react', 'react-dom', 'react-dom/server'],\n  ].forEach(function(pair) {\n    var coreModuleName = pair[0];\n    var domModuleName = pair[1];\n    var domServerModuleName = pair[2];\n\n    var domAlreadyDeclared = false;\n    var domServerAlreadyDeclared = false;\n\n    var coreRequireDeclarator;\n    root\n      .find(j.CallExpression)\n      .filter(p => isRequire(p, coreModuleName))\n      .forEach(p => {\n        var name, scope;\n        if (p.parent.value.type === 'VariableDeclarator') {\n          if (p.parent.value.id.type === 'ObjectPattern') {\n            var pattern = p.parent.value.id;\n            var all = pattern.properties.every(function(prop) {\n              if (prop.key.type === 'Identifier') {\n                name = prop.key.name;\n                return CORE_PROPERTIES.indexOf(name) !== -1;\n              }\n              return false;\n            });\n            if (all) {\n              // var {PropTypes} = require('React'); so leave alone\n              return;\n            }\n          }\n          if (coreRequireDeclarator) {\n            reportError(\n              p.value,\n              'Multiple declarations of React'\n            );\n          }\n          if (p.parent.value.id.type !== 'Identifier') {\n            reportError(\n              p.value,\n              'Unexpected destructuring in require of ' + coreModuleName\n            );\n          }\n          name = p.parent.value.id.name;\n          scope = p.scope.lookup(name);\n          if (scope.declares('ReactDOM')) {\n            console.log('Using existing ReactDOM var in ' + file.path);\n            domAlreadyDeclared = true;\n          }\n          if (scope.declares('ReactDOMServer')) {\n            console.log('Using existing ReactDOMServer var in ' + file.path);\n            domServerAlreadyDeclared = true;\n          }\n          coreRequireDeclarator = p.parent;\n        } else if (p.parent.value.type === 'AssignmentExpression') {\n          if (p.parent.value.left.type !== 'Identifier') {\n            reportError(\n              p.value,\n              'Unexpected destructuring in require of ' + coreModuleName\n            );\n          }\n          name = p.parent.value.left.name;\n          scope = p.scope.lookup(name);\n          var reactBindings = scope.getBindings()[name];\n          if (reactBindings.length !== 1) {\n            throw new Error(\n              'Unexpected number of bindings: ' + reactBindings.length\n            );\n          }\n          coreRequireDeclarator = reactBindings[0].parent;\n          if (coreRequireDeclarator.value.init &&\n              !isRequire(coreRequireDeclarator.get('init'), coreModuleName)) {\n            reportError(\n              coreRequireDeclarator.value,\n              'Unexpected initialization of ' + coreModuleName\n            );\n          }\n          if (scope.declares('ReactDOM')) {\n            console.log('Using existing ReactDOM var in ' + file.path);\n            domAlreadyDeclared = true;\n          }\n          if (scope.declares('ReactDOMServer')) {\n            console.log('Using existing ReactDOMServer var in ' + file.path);\n            domServerAlreadyDeclared = true;\n          }\n        }\n      });\n    if (!coreRequireDeclarator) {\n      return;\n    }\n\n    if (!domAlreadyDeclared &&\n        root.find(j.Identifier, {name: 'ReactDOM'}).size() > 0) {\n      throw new Error(\n        'ReactDOM is already defined in a different scope than React'\n      );\n    }\n    if (!domServerAlreadyDeclared &&\n        root.find(j.Identifier, {name: 'ReactDOMServer'}).size() > 0) {\n      throw new Error(\n        'ReactDOMServer is already defined in a different scope than React'\n      );\n    }\n\n    var coreName = coreRequireDeclarator.value.id.name;\n\n    var processed = new Set();\n    var requireAssignments = [];\n    var coreUses = 0;\n    var domUses = 0;\n    var domServerUses = 0;\n\n    root\n      .find(j.Identifier, {name: coreName})\n      .forEach(p => {\n        if (processed.has(p.value)) {\n          // https://github.com/facebook/jscodeshift/issues/36\n          return;\n        }\n        processed.add(p.value);\n        if (p.parent.value.type === 'MemberExpression' ||\n            p.parent.value.type === 'QualifiedTypeIdentifier') {\n          var left;\n          var right;\n          if (p.parent.value.type === 'MemberExpression') {\n            left = p.parent.value.object;\n            right = p.parent.value.property;\n          } else {\n            left = p.parent.value.qualification;\n            right = p.parent.value.id;\n          }\n          if (left === p.value) {\n            // React.foo (or React[foo])\n            if (right.type === 'Identifier') {\n              var name = right.name;\n              if (CORE_PROPERTIES.indexOf(name) !== -1) {\n                coreUses++;\n              } else if (DOM_PROPERTIES.indexOf(name) !== -1) {\n                domUses++;\n                j(p).replaceWith(j.identifier('ReactDOM'));\n              } else if (DOM_SERVER_PROPERTIES.indexOf(name) !== -1) {\n                domServerUses++;\n                j(p).replaceWith(j.identifier('ReactDOMServer'));\n              } else {\n                throw new Error('Unknown property React.' + name);\n              }\n            }\n          } else if (right === p.value) {\n            // foo.React, no need to transform\n          } else {\n            throw new Error('unimplemented');\n          }\n        } else if (p.parent.value.type === 'VariableDeclarator') {\n          if (p.parent.value.id === p.value) {\n            // var React = ...;\n          } else if (p.parent.value.init === p.value) {\n            // var ... = React;\n            var pattern = p.parent.value.id;\n            if (pattern.type === 'ObjectPattern') {\n              // var {PropTypes} = React;\n              // Most of these cases will just be looking at {PropTypes} so this\n              // is usually a no-op.\n              var coreProperties = [];\n              var domProperties = [];\n              pattern.properties.forEach(function(prop) {\n                if (prop.key.type === 'Identifier') {\n                  var key = prop.key.name;\n                  if (CORE_PROPERTIES.indexOf(key) !== -1) {\n                    coreProperties.push(prop);\n                  } else if (DOM_PROPERTIES.indexOf(key) !== -1) {\n                    domProperties.push(prop);\n                  } else {\n                    throw new Error(\n                      'Unknown property React.' + key + ' while destructuring'\n                    );\n                  }\n                } else {\n                  throw new Error('unimplemented');\n                }\n              });\n              var domDeclarator = j.variableDeclarator(\n                j.objectPattern(domProperties),\n                j.identifier('ReactDOM')\n              );\n              if (coreProperties.length && !domProperties.length) {\n                // nothing to do\n                coreUses++;\n              } else if (domProperties.length && !coreProperties.length) {\n                domUses++;\n                j(p.parent).replaceWith(domDeclarator);\n              } else {\n                coreUses++;\n                domUses++;\n                var decl = j(p).closest(j.VariableDeclaration);\n                decl.insertAfter(j.variableDeclaration(\n                  decl.get().value.kind,\n                  [domDeclarator]\n                ));\n              }\n            } else {\n              throw new Error('unimplemented');\n            }\n          } else {\n            throw new Error('unimplemented');\n          }\n        } else if (p.parent.value.type === 'AssignmentExpression') {\n          if (p.parent.value.left === p.value) {\n            if (isRequire(p.parent.get('right'), coreModuleName)) {\n              requireAssignments.push(p.parent);\n            } else {\n              reportError(\n                p.parent.value,\n                'Unexpected assignment to ' + coreModuleName\n              );\n            }\n          } else {\n            throw new Error('unimplemented');\n          }\n        } else {\n          reportError(p.value, 'unimplemented ' + p.parent.value.type);\n        }\n      });\n\n    coreUses += root.find(j.JSXElement).size();\n\n    function insertRequire(name, path) {\n      var req = j.callExpression(\n        j.identifier('require'),\n        [j.literal(path)]\n      );\n      requireAssignments.forEach(function(requireAssignment) {\n        requireAssignment.parent.insertAfter(\n          j.expressionStatement(\n            j.assignmentExpression('=', j.identifier(name), req)\n          )\n        );\n      });\n      coreRequireDeclarator.parent.insertAfter(j.variableDeclaration(\n        coreRequireDeclarator.parent.value.kind,\n        [j.variableDeclarator(\n          j.identifier(name),\n          coreRequireDeclarator.value.init ? req : null\n        )]\n      ));\n    }\n\n    if (domServerUses > 0 && !domServerAlreadyDeclared) {\n      insertRequire('ReactDOMServer', domServerModuleName);\n    }\n    if (domUses > 0 && !domAlreadyDeclared) {\n      insertRequire('ReactDOM', domModuleName);\n    }\n    if ((domUses > 0 || domServerUses > 0) && coreUses === 0) {\n      j(coreRequireDeclarator).remove();\n      requireAssignments.forEach(r => j(r).remove());\n    }\n  });\n\n  return root.toSource({quote: 'single'});\n};\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/sort-comp.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\n/**\n * Reorders React component methods to match the [ESLint](http://eslint.org/)\n * [react/sort-comp rule](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md),\n * specifically with the [tighter constraints of the Airbnb style guide](https://github.com/airbnb/javascript/blob/7684892951ef663e1c4e62ad57d662e9b2748b9e/packages/eslint-config-airbnb/rules/react.js#L122-L134),\n *\n *  'react/sort-comp': [2, {\n *    'order': [\n *      'static-methods',\n *      'lifecycle',\n *      '/^on.+$/',\n *      '/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/',\n *      'everything-else',\n *      '/^render.+$/',\n *      'render'\n *    ]\n *  }],\n */\n\nmodule.exports = function(fileInfo, api, options) {\n  const j = api.jscodeshift;\n\n  const ReactUtils = require('./utils/ReactUtils')(j);\n\n  const printOptions =\n    options.printOptions || {quote: 'single', trailingComma: true};\n\n  const methodsOrder = getMethodsOrder(fileInfo, options); // eslint-disable-line no-use-before-define\n\n  const root = j(fileInfo.source);\n\n  const propertyComparator = (a, b) => {\n    const nameA = a.key.name;\n    const nameB = b.key.name;\n\n    const indexA = getCorrectIndex(methodsOrder, a); // eslint-disable-line no-use-before-define\n    const indexB = getCorrectIndex(methodsOrder, b); // eslint-disable-line no-use-before-define\n\n    const sameLocation = indexA === indexB;\n\n    if (sameLocation) {\n      // compare lexically\n      return +(nameA > nameB) || +(nameA === nameB) - 1;\n    } else {\n      // compare by index\n      return indexA - indexB;\n    }\n  };\n\n  const sortComponentProperties = classPath => {\n    const spec = ReactUtils.getReactCreateClassSpec(classPath);\n\n    if (spec) {\n      spec.properties.sort(propertyComparator);\n    }\n  };\n\n  const sortClassProperties = classPath => {\n    const spec = ReactUtils.getClassExtendReactSpec(classPath);\n\n    if (spec) {\n      spec.body.sort(propertyComparator);\n    }\n  };\n\n  if (\n    options['explicit-require'] === false ||\n    ReactUtils.hasReact(root)\n  ) {\n    const createClassSortCandidates = ReactUtils.findReactCreateClass(root);\n    const es6ClassSortCandidates = ReactUtils.findReactES6ClassDeclaration(root);\n\n    if (createClassSortCandidates.size() > 0) {\n      createClassSortCandidates.forEach(sortComponentProperties);\n    }\n\n    if (es6ClassSortCandidates.size() > 0) {\n      es6ClassSortCandidates.forEach(sortClassProperties);\n    }\n\n    if (\n      createClassSortCandidates.size() > 0 ||\n      es6ClassSortCandidates.size() > 0\n    ) {\n      return root.toSource(printOptions);\n    }\n  }\n\n  return null;\n};\n\n// Hard-coded for Airbnb style\nconst defaultMethodsOrder = [\n  'static-methods',\n  'displayName',\n  'propTypes',\n  'contextTypes',\n  'childContextTypes',\n  'mixins',\n  'statics',\n  'defaultProps',\n  'constructor',\n  'getDefaultProps',\n  'state',\n  'getInitialState',\n  'getChildContext',\n  'componentWillMount',\n  'componentDidMount',\n  'componentWillReceiveProps',\n  'shouldComponentUpdate',\n  'componentWillUpdate',\n  'componentDidUpdate',\n  'componentWillUnmount',\n  '/^on.+$/',\n  '/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/',\n  'everything-else',\n  '/^render.+$/',\n  'render',\n];\n\n// FROM https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/sort-comp.js\nconst regExpRegExp = /\\/(.*)\\/([g|y|i|m]*)/;\n\nfunction selectorMatches(selector, method) {\n  if (method.static && selector === 'static-methods') {\n    return true;\n  }\n\n  const methodName = method.key.name;\n\n  if (selector === methodName) {\n    return true;\n  }\n\n  const selectorIsRe = regExpRegExp.test(selector);\n\n  if (selectorIsRe) {\n    const match = selector.match(regExpRegExp);\n    const selectorRe = new RegExp(match[1], match[2]);\n    return selectorRe.test(methodName);\n  }\n\n  return false;\n}\n\n/**\n * Get index of the matching patterns in methods order configuration\n * @param {Object} method\n * @returns {Number} Index of the method in the method ordering. Return [Infinity] if there is no match.\n */\nfunction getCorrectIndex(methodsOrder, method) {\n  const everythingElseIndex = methodsOrder.indexOf('everything-else');\n\n  for (let i = 0; i < methodsOrder.length; i++) {\n    if (i != everythingElseIndex && selectorMatches(methodsOrder[i], method)) {\n      return i;\n    }\n  }\n\n  if (everythingElseIndex >= 0) {\n    return everythingElseIndex;\n  } else {\n    return Infinity;\n  }\n}\n\nfunction getMethodsOrderFromEslint(filePath) {\n  let order;\n  const CLIEngine = require('eslint').CLIEngine;\n  const cli = new CLIEngine({ useEslintrc: true });\n  try {\n    const config = cli.getConfigForFile(filePath);\n    const {rules} = config;\n    const sortCompRules = rules['react/sort-comp'];\n    order = sortCompRules && sortCompRules[1].order;\n  } catch (e) {\n    // unable to get config for file\n  }\n  return order;\n}\n\nfunction getMethodsOrder(fileInfo, options) {\n  return options.methodsOrder\n    || getMethodsOrderFromEslint(fileInfo.path)\n    || defaultMethodsOrder;\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-anonymous2.input.js":"/**\n * @flow\n */\n/* eslint-disable no-use-before-define */\n'use strict';\n\nvar React = require('React');\n\nvar CrazyObject = {\n  foo: {\n    bar: 123,\n  },\n  method: {\n    wrapThisGuy: (x) => x,\n    deep: {\n      wrapThatGuy: (x) => x,\n    },\n  },\n  iDontUnderstand: {\n    whyYouDoThis: {\n      butAnyway: {\n        comp1: React.createClass({\n          render() {\n            return <div/>;\n          },\n        }),\n        comp2: CrazyObject.method.wrapThatGuy(React.createClass({\n          render() {\n            return <div/>;\n          },\n        })),\n        waitWhatArrayForReal: [React.createClass({\n          render() {\n            return <div/>;\n          },\n        }), [React.createClass({\n          render() {\n            return <p/>;\n          },\n        }), React.createClass({\n          render() {\n            return <span/>;\n          },\n        })]],\n      },\n    },\n  },\n};\n\nmodule.exports = WaltUtils;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-anonymous2.output.js":"/**\n * @flow\n */\n/* eslint-disable no-use-before-define */\n'use strict';\n\nvar React = require('React');\n\nvar CrazyObject = {\n  foo: {\n    bar: 123,\n  },\n  method: {\n    wrapThisGuy: (x) => x,\n    deep: {\n      wrapThatGuy: (x) => x,\n    },\n  },\n  iDontUnderstand: {\n    whyYouDoThis: {\n      butAnyway: {\n        comp1: class extends React.Component {\n          render() {\n            return <div/>;\n          }\n        },\n        comp2: CrazyObject.method.wrapThatGuy(class extends React.Component {\n          render() {\n            return <div/>;\n          }\n        }),\n        waitWhatArrayForReal: [class extends React.Component {\n          render() {\n            return <div/>;\n          }\n        }, [class extends React.Component {\n          render() {\n            return <p/>;\n          }\n        }, class extends React.Component {\n          render() {\n            return <span/>;\n          }\n        }]],\n      },\n    },\n  },\n};\n\nmodule.exports = WaltUtils;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-anonymous.input.js":"var React = require('react');\n\nconst wrapper = (x) => x;\n\nconst Foo = wrapper(React.createClass({\n  render() {\n    return <div>wow so anonymous</div>;\n  },\n}));\n\nmodule.exports = wrapper(React.createClass({\n  render() {\n    return <div>wow so anonymous</div>;\n  },\n}));\n\nexport default wrapper(React.createClass({\n  render() {\n    return <div>wow so anonymous</div>;\n  },\n}));\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-anonymous.output.js":"var React = require('react');\n\nconst wrapper = (x) => x;\n\nconst Foo = wrapper(class extends React.Component {\n  render() {\n    return <div>wow so anonymous</div>;\n  }\n});\n\nmodule.exports = wrapper(class extends React.Component {\n  render() {\n    return <div>wow so anonymous</div>;\n  }\n});\n\nexport default wrapper(class extends React.Component {\n  render() {\n    return <div>wow so anonymous</div>;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow1.input.js":"/* @flow */\n\nvar React = require('react');\n\nvar Component = React.createClass({\n  propTypes: {\n    optionalArray: React.PropTypes.array,\n    optionalBool: React.PropTypes.bool,\n    optionalFunc: React.PropTypes.func,\n    optionalNumber: React.PropTypes.number,\n    optionalObject: React.PropTypes.object,\n    optionalString: React.PropTypes.string,\n    optionalNode: React.PropTypes.node,\n    optionalElement: React.PropTypes.element,\n    optionalMessage: React.PropTypes.instanceOf(Message),\n    optionalEnum: React.PropTypes.oneOf(['News', 'Photos', 1, true, null, undefined]),\n    optionalUnion: React.PropTypes.oneOfType([\n      React.PropTypes.string,\n      React.PropTypes.number,\n      React.PropTypes.instanceOf(Message),\n    ]),\n    optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),\n    optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),\n    optionalObjectOfRequiredField: React.PropTypes.objectOf(React.PropTypes.number.isRequired),\n    requiredObjectOfRequiredField: React.PropTypes.objectOf(React.PropTypes.number.isRequired).isRequired,\n    requiredObjectOfOptionalField: React.PropTypes.objectOf(React.PropTypes.number).isRequired,\n    optionalObjectWithShape: React.PropTypes.shape({\n      color: React.PropTypes.string,\n      fontSize: React.PropTypes.number.isRequired,\n    }),\n    requiredFunc: React.PropTypes.func.isRequired,\n    requiredAny: React.PropTypes.any.isRequired,\n  },\n\n  render: function() {\n    return (\n      <div>type safety</div>\n    );\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow1.output.js":"/* @flow */\n\nvar React = require('react');\n\nclass Component extends React.Component {\n  props: {\n    optionalArray?: Array<$FlowFixMe>,\n    optionalBool?: boolean,\n    optionalFunc?: Function,\n    optionalNumber?: number,\n    optionalObject?: Object,\n    optionalString?: string,\n    optionalNode?: $FlowFixMe,\n    optionalElement?: $FlowFixMe,\n    optionalMessage?: Message,\n    optionalEnum?: 'News' | 'Photos' | 1 | true | null | void,\n    optionalUnion?: string | number | Message,\n    optionalArrayOf?: Array<number>,\n    optionalObjectOf?: {[key: string]: number},\n    optionalObjectOfRequiredField?: {[key: string]: number},\n    requiredObjectOfRequiredField: {[key: string]: number},\n    requiredObjectOfOptionalField: {[key: string]: number},\n    optionalObjectWithShape?: {\n      color?: string,\n      fontSize: number,\n    },\n    requiredFunc: Function,\n    requiredAny: any,\n  };\n\n  static propTypes = {\n    optionalArray: React.PropTypes.array,\n    optionalBool: React.PropTypes.bool,\n    optionalFunc: React.PropTypes.func,\n    optionalNumber: React.PropTypes.number,\n    optionalObject: React.PropTypes.object,\n    optionalString: React.PropTypes.string,\n    optionalNode: React.PropTypes.node,\n    optionalElement: React.PropTypes.element,\n    optionalMessage: React.PropTypes.instanceOf(Message),\n    optionalEnum: React.PropTypes.oneOf(['News', 'Photos', 1, true, null, undefined]),\n    optionalUnion: React.PropTypes.oneOfType([\n      React.PropTypes.string,\n      React.PropTypes.number,\n      React.PropTypes.instanceOf(Message),\n    ]),\n    optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),\n    optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),\n    optionalObjectOfRequiredField: React.PropTypes.objectOf(React.PropTypes.number.isRequired),\n    requiredObjectOfRequiredField: React.PropTypes.objectOf(React.PropTypes.number.isRequired).isRequired,\n    requiredObjectOfOptionalField: React.PropTypes.objectOf(React.PropTypes.number).isRequired,\n    optionalObjectWithShape: React.PropTypes.shape({\n      color: React.PropTypes.string,\n      fontSize: React.PropTypes.number.isRequired,\n    }),\n    requiredFunc: React.PropTypes.func.isRequired,\n    requiredAny: React.PropTypes.any.isRequired,\n  };\n\n  render() {\n    return (\n      <div>type safety</div>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow2.input.js":"/* code taken from https://github.com/reactjs/react-router/blob/master/modules/IndexRoute.js */\n/* @flow */\n\nimport React from 'react'\nimport warning from './routerWarning'\nimport invariant from 'invariant'\nimport { createRouteFromReactElement } from './RouteUtils'\nimport { component, components, falsy } from './InternalPropTypes'\n\nconst { func } = React.PropTypes\n\n/**\n * An <IndexRoute> is used to specify its parent's <Route indexRoute> in\n * a JSX route config.\n */\nconst IndexRoute = React.createClass({\n\n  statics: {\n\n    createRouteFromReactElement(element, parentRoute) {\n      /* istanbul ignore else: sanity check */\n      if (parentRoute) {\n        parentRoute.indexRoute = createRouteFromReactElement(element)\n      } else {\n        warning(\n          false,\n          'An <IndexRoute> does not make sense at the root of your route config'\n        )\n      }\n    }\n\n  },\n\n  propTypes: {\n    path: falsy,\n    component,\n    components,\n    getComponent: func,\n    getComponents: func\n  },\n\n  /* istanbul ignore next: sanity check */\n  render() {\n    invariant(\n      false,\n      '<IndexRoute> elements are for router configuration only and should not be rendered'\n    )\n  }\n\n})\n\nexport default IndexRoute\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow2.output.js":"/* code taken from https://github.com/reactjs/react-router/blob/master/modules/IndexRoute.js */\n/* @flow */\n\nimport React from 'react'\nimport warning from './routerWarning'\nimport invariant from 'invariant'\nimport { createRouteFromReactElement } from './RouteUtils'\nimport { component, components, falsy } from './InternalPropTypes'\n\nconst { func } = React.PropTypes\n\n/**\n * An <IndexRoute> is used to specify its parent's <Route indexRoute> in\n * a JSX route config.\n */\nclass IndexRoute extends React.Component {\n  props: {\n    path?: $FlowFixMe,\n    component?: $FlowFixMe,\n    components?: $FlowFixMe,\n    getComponent?: $FlowFixMe,\n    getComponents?: $FlowFixMe,\n  };\n\n  static createRouteFromReactElement(element, parentRoute) {\n    /* istanbul ignore else: sanity check */\n    if (parentRoute) {\n      parentRoute.indexRoute = createRouteFromReactElement(element)\n    } else {\n      warning(\n        false,\n        'An <IndexRoute> does not make sense at the root of your route config'\n      )\n    }\n  }\n\n  static propTypes = {\n    path: falsy,\n    component,\n    components,\n    getComponent: func,\n    getComponents: func\n  };\n\n  /* istanbul ignore next: sanity check */\n  render() {\n    invariant(\n      false,\n      '<IndexRoute> elements are for router configuration only and should not be rendered'\n    )\n  }\n}\n\nexport default IndexRoute\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow3.input.js":"/* @flow */\n\nvar React = require('react');\nvar {PropTypes} = React;\n\nvar getPropTypes = () => PropTypes.string;\n\nvar myUnionPropType = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number,\n  PropTypes.instanceOf(Message),\n]);\n\nvar spreadMe = {\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n};\n\nvar optionalFuncShortHand = PropTypes.func;\n\nvar Component = React.createClass({\n  propTypes: {\n    ...spreadMe,\n    optionalFuncShortHand,\n    optionalNumber: 1 + 1 === 2 ? PropTypes.number : PropTypes.string,\n    optionalObject: PropTypes.object,\n    optionalString: getPropTypes(),\n    optionalNode: PropTypes.node,\n    optionalElement: PropTypes.element,\n    optionalMessage: PropTypes.instanceOf(Message),\n    optionalEnum: PropTypes.oneOf(['News', 'Photos', 1, true, null]),\n    optionalUnion: myUnionPropType,\n    optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n    optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n    optionalObjectWithShape: PropTypes.shape({\n      color: PropTypes.string,\n    }),\n    requiredFunc: PropTypes.func.isRequired,\n    requiredAny: PropTypes.any.isRequired,\n  },\n\n  render: function() {\n    return (\n      <div>type safety</div>\n    );\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow3.output.js":"/* @flow */\n\nvar React = require('react');\nvar {PropTypes} = React;\n\nvar getPropTypes = () => PropTypes.string;\n\nvar myUnionPropType = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number,\n  PropTypes.instanceOf(Message),\n]);\n\nvar spreadMe = {\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n};\n\nvar optionalFuncShortHand = PropTypes.func;\n\nclass Component extends React.Component {\n  props: {\n    optionalFuncShortHand?: $FlowFixMe,\n    optionalNumber?: $FlowFixMe,\n    optionalObject?: Object,\n    optionalString?: $FlowFixMe,\n    optionalNode?: $FlowFixMe,\n    optionalElement?: $FlowFixMe,\n    optionalMessage?: Message,\n    optionalEnum?: 'News' | 'Photos' | 1 | true | null,\n    optionalUnion?: $FlowFixMe,\n    optionalArrayOf?: Array<number>,\n    optionalObjectOf?: {[key: string]: number},\n    optionalObjectWithShape?: {color?: string},\n    requiredFunc: Function,\n    requiredAny: any,\n  };\n\n  static propTypes = {\n    ...spreadMe,\n    optionalFuncShortHand,\n    optionalNumber: 1 + 1 === 2 ? PropTypes.number : PropTypes.string,\n    optionalObject: PropTypes.object,\n    optionalString: getPropTypes(),\n    optionalNode: PropTypes.node,\n    optionalElement: PropTypes.element,\n    optionalMessage: PropTypes.instanceOf(Message),\n    optionalEnum: PropTypes.oneOf(['News', 'Photos', 1, true, null]),\n    optionalUnion: myUnionPropType,\n    optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n    optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n    optionalObjectWithShape: PropTypes.shape({\n      color: PropTypes.string,\n    }),\n    requiredFunc: PropTypes.func.isRequired,\n    requiredAny: PropTypes.any.isRequired,\n  };\n\n  render() {\n    return (\n      <div>type safety</div>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow4.input.js":"/* @flow */\n\nvar React = require('react');\nvar {PropTypes} = React;\n\nvar myUnionPropType = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number,\n  PropTypes.instanceOf(Message),\n]);\n\nvar spreadMe = {\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n};\n\nvar optionalFuncShortHand = PropTypes.func;\n\nvar Component = React.createClass({\n  propTypes: Object.assign({}, {\n    ...spreadMe,\n    optionalFuncShortHand,\n    optionalNumber: PropTypes.number,\n    optionalObject: PropTypes.object,\n  }),\n\n  render: function() {\n    return (\n      <div>type safety</div>\n    );\n  },\n});\n\nvar thatPropTypes = {};\n\nvar Component2 = React.createClass({\n  propTypes: thatPropTypes,\n\n  render: function() {\n    return (\n      <div>type safety</div>\n    );\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow4.output.js":"/* @flow */\n\nvar React = require('react');\nvar {PropTypes} = React;\n\nvar myUnionPropType = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number,\n  PropTypes.instanceOf(Message),\n]);\n\nvar spreadMe = {\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n};\n\nvar optionalFuncShortHand = PropTypes.func;\n\nclass Component extends React.Component {\n  static propTypes = Object.assign({}, {\n    ...spreadMe,\n    optionalFuncShortHand,\n    optionalNumber: PropTypes.number,\n    optionalObject: PropTypes.object,\n  });\n\n  render() {\n    return (\n      <div>type safety</div>\n    );\n  }\n}\n\nvar thatPropTypes = {};\n\nclass Component2 extends React.Component {\n  static propTypes = thatPropTypes;\n\n  render() {\n    return (\n      <div>type safety</div>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow5.input.js":"/* @flow */\n\nvar React = require('react');\n\ntype SomeStuff<A> = { // TypeParameter\n  fetch: () => Promise<A>,\n};\n\nvar Component = React.createClass({\n  statics: {\n    notTyped: true,\n    nothing: (null: null), // NullTypeAnnotation\n    numberOrBool: (true: number | boolean),\n    logger: (x: any): void => { console.log(x); },\n    logger2: function(x: any): void {\n      console.log(x);\n    },\n  },\n\n  notTyped: true,\n  foo: (12: number),\n  bar: ('2000': string),\n  handleClick: (null: ?(evt: any) => void),\n\n  doStuff: function(x: number, y: boolean): boolean {\n    return y && (x > 0);\n  },\n\n  componentDidMount: function() {\n    this.handleClick = function(e) {\n      console.log(e);\n    };\n  },\n\n  render: function() {\n    return (\n      <div onClick={this.handleClick}>{this.foo}</div>\n    );\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow5.output.js":"/* @flow */\n\nvar React = require('react');\n\ntype SomeStuff<A> = { // TypeParameter\n  fetch: () => Promise<A>,\n};\n\nclass Component extends React.Component {\n  static notTyped = true;\n  static nothing: null = null; // NullTypeAnnotation\n  static numberOrBool: number | boolean = true;\n  static logger = (x: any): void => { console.log(x); };\n\n  static logger2(x: any): void {\n    console.log(x);\n  }\n\n  notTyped = true;\n  foo: number = 12;\n  bar: string = '2000';\n  handleClick: ?(evt: any) => void = null;\n\n  doStuff = (x: number, y: boolean): boolean => {\n    return y && (x > 0);\n  };\n\n  componentDidMount() {\n    this.handleClick = function(e) {\n      console.log(e);\n    };\n  }\n\n  render() {\n    return (\n      <div onClick={this.handleClick}>{this.foo}</div>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow6.input.js":"/* @flow */\n\nvar React = require('react');\n\nconst justNeedKeys = {\n  a: 12,\n  b: 23,\n};\n\nvar Component = React.createClass({\n  propTypes: {\n    optionalMessage: React.PropTypes.instanceOf(Message),\n    optionalMessageOops: React.PropTypes.instanceOf(foo()),\n    optionalEnum: React.PropTypes.oneOf(Object.keys(justNeedKeys)),\n    optionalEnumOops: React.PropTypes.oneOf(bar),\n    optionalUnion: React.PropTypes.oneOfType([\n      React.PropTypes.string,\n      React.PropTypes.number,\n      React.PropTypes.instanceOf(Message),\n    ]),\n    optionalUnionOops: React.PropTypes.oneOfType(foo()),\n    optionalUnionOops2: React.PropTypes.oneOfType(Bar),\n    optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),\n    optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),\n    optionalObjectWithShape: React.PropTypes.shape({\n      color: React.PropTypes.string,\n      fontSize: foo,\n      name: bla(),\n    }),\n    optionalObjectWithShapeOops: React.PropTypes.shape(foo()),\n    optionalObjectWithShapeOops2: React.PropTypes.shape(bla),\n    'is-literal-cool': React.PropTypes.bool,\n    'well-fine': React.PropTypes.number.isRequired,\n  },\n\n  render: function() {\n    return (\n      <div>type safety</div>\n    );\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow6.output.js":"/* @flow */\n\nvar React = require('react');\n\nconst justNeedKeys = {\n  a: 12,\n  b: 23,\n};\n\nclass Component extends React.Component {\n  props: {\n    optionalMessage?: Message,\n    optionalMessageOops?: $FlowFixMe,\n    optionalEnum?: $FlowFixMe,\n    optionalEnumOops?: $FlowFixMe,\n    optionalUnion?: string | number | Message,\n    optionalUnionOops?: $FlowFixMe,\n    optionalUnionOops2?: $FlowFixMe,\n    optionalArrayOf?: Array<number>,\n    optionalObjectOf?: {[key: string]: number},\n    optionalObjectWithShape?: {\n      color?: string,\n      fontSize?: $FlowFixMe,\n      name?: $FlowFixMe,\n    },\n    optionalObjectWithShapeOops?: $FlowFixMe,\n    optionalObjectWithShapeOops2?: $FlowFixMe,\n    'is-literal-cool'?: boolean,\n    'well-fine': number,\n  };\n\n  static propTypes = {\n    optionalMessage: React.PropTypes.instanceOf(Message),\n    optionalMessageOops: React.PropTypes.instanceOf(foo()),\n    optionalEnum: React.PropTypes.oneOf(Object.keys(justNeedKeys)),\n    optionalEnumOops: React.PropTypes.oneOf(bar),\n    optionalUnion: React.PropTypes.oneOfType([\n      React.PropTypes.string,\n      React.PropTypes.number,\n      React.PropTypes.instanceOf(Message),\n    ]),\n    optionalUnionOops: React.PropTypes.oneOfType(foo()),\n    optionalUnionOops2: React.PropTypes.oneOfType(Bar),\n    optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),\n    optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),\n    optionalObjectWithShape: React.PropTypes.shape({\n      color: React.PropTypes.string,\n      fontSize: foo,\n      name: bla(),\n    }),\n    optionalObjectWithShapeOops: React.PropTypes.shape(foo()),\n    optionalObjectWithShapeOops2: React.PropTypes.shape(bla),\n    'is-literal-cool': React.PropTypes.bool,\n    'well-fine': React.PropTypes.number.isRequired,\n  };\n\n  render() {\n    return (\n      <div>type safety</div>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow7.input.js":"/* @flow */\n\nvar React = require('react');\n\nconst justNeedKeys = {\n  a: 12,\n  b: 23,\n};\n\nvar Component = React.createClass({\n  propTypes: {\n    optionalMessage: React.PropTypes.instanceOf(Message),\n    optionalMessageOops: React.PropTypes.instanceOf(foo()),\n    optionalEnum: React.PropTypes.oneOf(Object.keys(justNeedKeys)),\n    optionalEnumOops: React.PropTypes.oneOf(bar),\n    optionalUnion: React.PropTypes.oneOfType([\n      React.PropTypes.string,\n      React.PropTypes.number,\n      React.PropTypes.instanceOf(Message),\n    ]),\n    optionalUnionOops: React.PropTypes.oneOfType(foo()),\n    optionalUnionOops2: React.PropTypes.oneOfType(Bar),\n    optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),\n    optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),\n    optionalObjectWithShape: React.PropTypes.shape({\n      color: React.PropTypes.string,\n      fontSize: foo,\n      name: bla(),\n    }),\n    optionalObjectWithShapeOops: React.PropTypes.shape(foo()),\n    optionalObjectWithShapeOops2: React.PropTypes.shape(bla),\n    'is-literal-cool': React.PropTypes.bool,\n    'well-fine': React.PropTypes.number.isRequired,\n  },\n\n  render: function() {\n    return (\n      <div>type safety</div>\n    );\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-flow7.output.js":"/* @flow */\n\nvar React = require('react');\n\nconst justNeedKeys = {\n  a: 12,\n  b: 23,\n};\n\nclass Component extends React.Component {\n  props: {\n    optionalMessage?: Message,\n    optionalMessageOops?: $FlowFixMe,\n    optionalEnum?: $FlowFixMe,\n    optionalEnumOops?: $FlowFixMe,\n    optionalUnion?: string | number | Message,\n    optionalUnionOops?: $FlowFixMe,\n    optionalUnionOops2?: $FlowFixMe,\n    optionalArrayOf?: Array<number>,\n    optionalObjectOf?: {[key: string]: number},\n    optionalObjectWithShape?: {\n      color?: string,\n      fontSize?: $FlowFixMe,\n      name?: $FlowFixMe,\n    },\n    optionalObjectWithShapeOops?: $FlowFixMe,\n    optionalObjectWithShapeOops2?: $FlowFixMe,\n    'is-literal-cool'?: boolean,\n    'well-fine': number,\n  };\n\n  render() {\n    return (\n      <div>type safety</div>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-initial-state.input.js":"/* @flow */\n\nimport React from 'React';\n\ntype SomeState = {foo: string};\n\n// only needs props\nvar MyComponent = React.createClass({\n  getInitialState: function(): {heyoo: number} {\n    var x = this.props.foo;\n    return {\n      heyoo: 23,\n    };\n  },\n\n  foo: function(): void {\n    this.setState({heyoo: 24});\n  },\n});\n\nvar ComponentWithBothPropsAndContextAccess = React.createClass({\n  contextTypes: {\n    name: React.PropTypes.string,\n  },\n\n  // we actually don't need a constructor here since this will be\n  // initialized after a proper super(props, context) call.\n  // in other words, `this` will be ready when it reaches here.\n  getInitialState: function() {\n    return {\n      foo: this.props.foo,\n      bar: this.context.bar,\n    };\n  },\n\n  render: function() {\n    return (\n      <div>{this.context.name}</div>\n    );\n  },\n});\n\nconst App = React.createClass({\n  getInitialState(): SomeState {\n    const state = this.calculateState(); // _might_ use `this.context`\n    return state;\n  },\n  calculateState() {\n    return { color: this.context.color };\n  },\n  render() {\n    return <div />;\n  },\n});\n\nconst App2 = React.createClass({\n  getInitialState() {\n    const state = {\n      whatever: this.context.whatever, // needs context\n    };\n    return state;\n  },\n  render() {\n    return <div />;\n  },\n});\n\nApp.contextTypes = {\n  whatever: React.PropTypes.object,\n};\n\nvar MyComponent2 = React.createClass({\n  getInitialState: function() {\n    var x = this.props.foo.bar.wow.so.deep;\n    return {\n      heyoo: 23,\n    };\n  },\n\n  foo: function(): void {\n    this.setState({heyoo: 24});\n  },\n});\n\nconst getContextFromInstance = (x) => x.context; // meh\n\nvar MyComponent3 = React.createClass({\n  getInitialState: function() {\n    var x = getContextFromInstance(this); // `this` is referenced alone\n    return {\n      heyoo: x,\n    };\n  },\n\n  foo: function(): void {\n    this.setState({heyoo: 24});\n  },\n});\n\n// we are not sure what you'll need from `this`,\n// so it's safe to defer `state`'s initialization\nvar MyComponent4 = React.createClass({\n  getInitialState: function() {\n    return {\n      heyoo: getContextFromInstance(this),\n    };\n  },\n\n  foo: function(): void {\n    this.setState({heyoo: 24});\n  },\n});\n\n// but only accessing `this.props` and/or `this.context` is safe\nvar MyComponent5 = React.createClass({\n  getInitialState: function() {\n    return {\n      heyoo: getContextFromInstance(this.props),\n    };\n  },\n\n  foo: function(): void {\n    this.setState({heyoo: 24});\n  },\n});\n\n// intense control flow testing\nvar Loader = React.createClass({\n  getInitialState() {\n    if (this.props.stuff) {\n      return {x: 1};\n    } else if (this.props.thing) {\n      return {x: 2};\n    }\n    switch (this.props.wow) {\n      case 1:\n        return this.props.lol ?\n          {x: 3} :\n          this.whatever(this.props);\n    }\n    for (let i = 0; i < 100; i++) {\n      if (i === 20) {\n        return {x: i};\n      }\n    }\n\n    try {\n      doSomeThingReallyBad();\n    } catch (e) {\n      return {error: e};\n    }\n\n    return this.lol();\n  },\n\n  render() {\n    return null;\n  },\n});\n\nvar FunctionDeclarationInGetInitialState = React.createClass({\n  getInitialState() {\n    function func() {\n      var x = 1;\n      return x; // dont change me\n    }\n\n    const foo = () => {\n      return 120; // dont change me\n    };\n\n    var q = function() {\n      return 100; // dont change me\n    };\n\n    return {\n      x: func(),\n      y: foo(),\n      z: q(),\n    };\n  },\n\n  render() {\n    return null;\n  },\n});\n\nvar DeferStateInitialization = React.createClass({\n  getInitialState() {\n    return {x: this.something};\n  },\n\n  something: 42,\n\n  render() {\n    return <div onClick={this.reset} />;\n  },\n});\n\nvar helper = () => {};\n\nvar PassGetInitialState = React.createClass({ // bail out here\n  getInitialState() {\n    return this.lol();\n  },\n\n  helper1: function() {\n    helper(this.getInitialState);\n  },\n\n  render() {\n    return null;\n  },\n});\n\nvar UseGetInitialState = React.createClass({ // bail out here\n  getInitialState() {\n    return this.lol();\n  },\n\n  helper2() {\n    this.setState(this.getInitialState());\n  },\n\n  render() {\n    return null;\n  },\n});\n\nvar UseArguments = React.createClass({ // bail out here\n  helper() {\n    console.log(arguments);\n  },\n\n  render() {\n    return null;\n  },\n});\n\nvar ShadowingIssue = React.createClass({ // bail out here\n  getInitialState() {\n    const props = { x: 123 };\n    return { x: props.x };\n  },\n\n  render() {\n    return null;\n  },\n});\n\n// will remove unnecessary bindings\nvar ShadowingButFine = React.createClass({\n  getInitialState() {\n    const props = this.props;\n    const context = this.context;\n    return { x: props.x + context.x };\n  },\n\n  render() {\n    return null;\n  },\n});\n\n// move type annotations\nvar WithSimpleType = React.createClass({\n  getInitialState(): Object {\n    return {\n      x: 12,\n      y: 13,\n      z: 14,\n    };\n  },\n\n  render() {\n    return null;\n  },\n});\n\nvar WithLongType = React.createClass({\n  getInitialState(): {name: string, age: number, counter: number} {\n    return {\n      name: 'Michael',\n      age: 23,\n      count: 6,\n    };\n  },\n\n  render() {\n    return null;\n  },\n});\n\nvar WithMultiLineType = React.createClass({\n  getInitialState(): {\n    nameLists: Array<Array<string>>,\n    age?: ?number,\n    counter?: ?number,\n  } {\n    return {\n      nameLists: [['James']],\n      count: 1400,\n      foo: 'bar',\n    };\n  },\n\n  render() {\n    return null;\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-initial-state.output.js":"/* @flow */\n\nimport React from 'React';\n\ntype SomeState = {foo: string};\n\n// only needs props\nclass MyComponent extends React.Component {\n  state: {heyoo: number};\n\n  constructor(props) {\n    super(props);\n    var x = props.foo;\n\n    this.state = {\n      heyoo: 23,\n    };\n  }\n\n  foo = (): void => {\n    this.setState({heyoo: 24});\n  };\n}\n\nclass ComponentWithBothPropsAndContextAccess extends React.Component {\n  static contextTypes = {\n    name: React.PropTypes.string,\n  };\n\n  // we actually don't need a constructor here since this will be\n  // initialized after a proper super(props, context) call.\n  // in other words, `this` will be ready when it reaches here.\n  state = {\n    foo: this.props.foo,\n    bar: this.context.bar,\n  };\n\n  render() {\n    return (\n      <div>{this.context.name}</div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  state: SomeState;\n\n  constructor(props, context) {\n    super(props, context);\n    const state = this.calculateState(); // _might_ use `this.context`\n    this.state = state;\n  }\n\n  calculateState = () => {\n    return { color: this.context.color };\n  };\n\n  render() {\n    return <div />;\n  }\n}\n\nclass App2 extends React.Component {\n  state: *;\n\n  constructor(props, context) {\n    super(props, context);\n    const state = {\n      whatever: context.whatever, // needs context\n    };\n    this.state = state;\n  }\n\n  render() {\n    return <div />;\n  }\n}\n\nApp.contextTypes = {\n  whatever: React.PropTypes.object,\n};\n\nclass MyComponent2 extends React.Component {\n  state: *;\n\n  constructor(props) {\n    super(props);\n    var x = props.foo.bar.wow.so.deep;\n\n    this.state = {\n      heyoo: 23,\n    };\n  }\n\n  foo = (): void => {\n    this.setState({heyoo: 24});\n  };\n}\n\nconst getContextFromInstance = (x) => x.context; // meh\n\nclass MyComponent3 extends React.Component {\n  state: *;\n\n  constructor(props, context) {\n    super(props, context);\n    var x = getContextFromInstance(this); // `this` is referenced alone\n\n    this.state = {\n      heyoo: x,\n    };\n  }\n\n  foo = (): void => {\n    this.setState({heyoo: 24});\n  };\n}\n\n// we are not sure what you'll need from `this`,\n// so it's safe to defer `state`'s initialization\nclass MyComponent4 extends React.Component {\n  foo = (): void => {\n    this.setState({heyoo: 24});\n  };\n\n  state = {\n    heyoo: getContextFromInstance(this),\n  };\n}\n\n// but only accessing `this.props` and/or `this.context` is safe\nclass MyComponent5 extends React.Component {\n  state = {\n    heyoo: getContextFromInstance(this.props),\n  };\n\n  foo = (): void => {\n    this.setState({heyoo: 24});\n  };\n}\n\n// intense control flow testing\nclass Loader extends React.Component {\n  state: *;\n\n  constructor(props, context) {\n    super(props, context);\n    if (props.stuff) {\n      this.state = {x: 1};\n      return;\n    } else if (props.thing) {\n      this.state = {x: 2};\n      return;\n    }\n    switch (props.wow) {\n      case 1:\n        this.state = props.lol ?\n          {x: 3} :\n          this.whatever(props);\n\n        return;\n    }\n    for (let i = 0; i < 100; i++) {\n      if (i === 20) {\n        this.state = {x: i};\n        return;\n      }\n    }\n\n    try {\n      doSomeThingReallyBad();\n    } catch (e) {\n      this.state = {error: e};\n      return;\n    }\n\n    this.state = this.lol();\n  }\n\n  render() {\n    return null;\n  }\n}\n\nclass FunctionDeclarationInGetInitialState extends React.Component {\n  state: *;\n\n  constructor(props) {\n    super(props);\n    function func() {\n      var x = 1;\n      return x; // dont change me\n    }\n\n    const foo = () => {\n      return 120; // dont change me\n    };\n\n    var q = function() {\n      return 100; // dont change me\n    };\n\n    this.state = {\n      x: func(),\n      y: foo(),\n      z: q(),\n    };\n  }\n\n  render() {\n    return null;\n  }\n}\n\nclass DeferStateInitialization extends React.Component {\n  something = 42;\n  state = {x: this.something};\n\n  render() {\n    return <div onClick={this.reset} />;\n  }\n}\n\nvar helper = () => {};\n\nvar PassGetInitialState = React.createClass({ // bail out here\n  getInitialState() {\n    return this.lol();\n  },\n\n  helper1: function() {\n    helper(this.getInitialState);\n  },\n\n  render() {\n    return null;\n  },\n});\n\nvar UseGetInitialState = React.createClass({ // bail out here\n  getInitialState() {\n    return this.lol();\n  },\n\n  helper2() {\n    this.setState(this.getInitialState());\n  },\n\n  render() {\n    return null;\n  },\n});\n\nvar UseArguments = React.createClass({ // bail out here\n  helper() {\n    console.log(arguments);\n  },\n\n  render() {\n    return null;\n  },\n});\n\nvar ShadowingIssue = React.createClass({ // bail out here\n  getInitialState() {\n    const props = { x: 123 };\n    return { x: props.x };\n  },\n\n  render() {\n    return null;\n  },\n});\n\n// will remove unnecessary bindings\nclass ShadowingButFine extends React.Component {\n  state: *;\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = { x: props.x + context.x };\n  }\n\n  render() {\n    return null;\n  }\n}\n\n// move type annotations\nclass WithSimpleType extends React.Component {\n  state: Object = {\n    x: 12,\n    y: 13,\n    z: 14,\n  };\n\n  render() {\n    return null;\n  }\n}\n\nclass WithLongType extends React.Component {\n  state: {name: string, age: number, counter: number} = {\n    name: 'Michael',\n    age: 23,\n    count: 6,\n  };\n\n  render() {\n    return null;\n  }\n}\n\nclass WithMultiLineType extends React.Component {\n  state: {\n    nameLists: Array<Array<string>>,\n    age?: ?number,\n    counter?: ?number,\n  } = {\n    nameLists: [['James']],\n    count: 1400,\n    foo: 'bar',\n  };\n\n  render() {\n    return null;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class.input.js":"'use strict';\n\nvar React = require('React');\nvar Relay = require('Relay');\n\nvar Image = require('Image.react');\n\n// Class comment\nvar MyComponent2 = React.createClass({\n  getDefaultProps: function(): Object {\n    return {a: 1};\n  },\n  foo: function(): void {\n    const x = (a: Object, b: string): void => {}; // This code cannot be parsed by Babel v5\n    pass(this.foo);\n    this.forceUpdate();\n  },\n});\n\nvar MyComponent3 = React.createClass({\n  statics: {\n    someThing: 10,\n    funcThatDoesNothing: function(): void {},\n  },\n  propTypes: {\n    highlightEntities: React.PropTypes.bool,\n    linkifyEntities: React.PropTypes.bool,\n    text: React.PropTypes.shape({\n      text: React.PropTypes.string,\n      ranges: React.PropTypes.array,\n    }).isRequired,\n  },\n\n  getDefaultProps: function() {\n    unboundFunc();\n    return {\n      linkifyEntities: true,\n      highlightEntities: false,\n    };\n  },\n\n  getInitialState: function() {\n    this.props.foo();\n    return {\n      heyoo: 23,\n    };\n  },\n\n  // comment here\n  _renderText: function(text: string): ReactElement<any> { // say something\n    return <Text text={text} />;\n  },\n\n  _renderImageRange: function(text: string, range): ReactElement<any> {\n    var image = range.image;\n    if (image) {\n      return (\n        <Image\n          src={image.uri}\n          height={image.height / image.scale}\n          width={image.width / image.scale}\n        />\n      );\n    }\n    return null;\n  },\n\n  autobindMe: function() {},\n  okBindMe: function(): number { return 12; },\n\n  // Function comment\n  _renderRange: function(text: string, range, bla: Promise<string>): ReactElement<any> {\n    var self = this;\n\n    self.okBindMe();\n    call(self.autobindMe);\n\n    var type = rage.type;\n    var {highlightEntities} = this.props;\n\n    if (type === 'ImageAtRange') {\n      return this._renderImageRange(text, range);\n    }\n\n    if (this.props.linkifyEntities) {\n      text =\n        <Link href={usersURI}>\n          {text}\n        </Link>;\n    } else {\n      text = <span>{text}</span>;\n    }\n\n    return text;\n  },\n\n  /* This is a comment */\n  render: function() {\n    var content = this.props.text;\n    return (\n      <BaseText\n        {...this.props}\n        textRenderer={this._renderText}\n        rangeRenderer={this._renderRange}\n        text={content.text}\n      />\n    );\n  },\n});\n\nvar MyComponent4 = React.createClass({\n  foo: callMeMaybe(),\n  render: function() {},\n});\n\nmodule.exports = Relay.createContainer(MyComponent, {\n  queries: {\n    me: Relay.graphql`this is not graphql`,\n  },\n});\n\nvar MyComponent5 = React.createClass({\n  getDefaultProps: function() {\n    return {\n      thisIs: true,\n      andThisIs: false,\n    };\n  },\n\n  statics: {},\n\n  getInitialState: function() {\n    return {\n      todos: [],\n    };\n  },\n\n  renderTodo: function(): ReactElement<any> {\n    return (\n      <div>\n        {this.state.todos.map((item) => <p key={item.id}>{item.text}</p>)}\n      </div>\n    );\n  },\n\n  render: function() {\n    return (\n      <div>\n        <h1>TODOs</h1>\n        {this.renderTodo()}\n      </div>\n    );\n  },\n});\n\nvar GoodName = React.createClass({\n  displayName: 'GoodName',\n  render() {\n    return <div/>;\n  },\n});\n\nvar SingleArgArrowFunction = React.createClass({\n  formatInt: function(/*number*/ num) /*string*/ {\n    return 'foobar';\n  },\n  render() {\n    return <div/>;\n  },\n});\n\nvar mySpec = {};\nvar NotAnObjectLiteral = React.createClass(mySpec);\n\nvar WaitWhat = React.createClass();\n\nvar HasSpreadArgs = React.createClass({\n  _helper: function(...args) {\n    return args;\n  },\n  _helper2: function(a, b, c, ...args) {\n    return args.concat(a);\n  },\n  _helper3: function(a: number, ...args: Array<string>) {\n    return args.concat('' + a);\n  },\n  render() {\n    return <div/>;\n  },\n});\n\nvar HasDefaultArgs = React.createClass({\n  _helper: function(foo = 12) {\n    return foo;\n  },\n  _helper2: function({foo: number = 12, abc}, bar: string = 'hey', ...args: Array<string>) {\n    return args.concat(foo, bar);\n  },\n  render() {\n    return <div/>;\n  },\n});\n\nvar ManyArgs = React.createClass({\n  _helper: function(foo = 12) {\n    return foo;\n  },\n  _helper2: function({foo: number = 12, abc}, bar: string = 'hey', x: number, y: number, ...args: Array<string>) {\n    return args.concat(foo, bar);\n  },\n  render() {\n    return <div/>;\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class.output.js":"'use strict';\n\nvar React = require('React');\nvar Relay = require('Relay');\n\nvar Image = require('Image.react');\n\n// Class comment\nclass MyComponent2 extends React.Component {\n  static defaultProps = {a: 1};\n\n  foo = (): void => {\n    const x = (a: Object, b: string): void => {}; // This code cannot be parsed by Babel v5\n    pass(this.foo);\n    this.forceUpdate();\n  };\n}\n\nclass MyComponent3 extends React.Component {\n  static someThing = 10;\n  static funcThatDoesNothing(): void {}\n\n  static propTypes = {\n    highlightEntities: React.PropTypes.bool,\n    linkifyEntities: React.PropTypes.bool,\n    text: React.PropTypes.shape({\n      text: React.PropTypes.string,\n      ranges: React.PropTypes.array,\n    }).isRequired,\n  };\n\n  static defaultProps = function() {\n    unboundFunc();\n    return {\n      linkifyEntities: true,\n      highlightEntities: false,\n    };\n  }();\n\n  constructor(props) {\n    super(props);\n    props.foo();\n\n    this.state = {\n      heyoo: 23,\n    };\n  }\n\n  // comment here\n  _renderText = (text: string): ReactElement<any> => { // say something\n    return <Text text={text} />;\n  };\n\n  _renderImageRange = (text: string, range): ReactElement<any> => {\n    var image = range.image;\n    if (image) {\n      return (\n        <Image\n          src={image.uri}\n          height={image.height / image.scale}\n          width={image.width / image.scale}\n        />\n      );\n    }\n    return null;\n  };\n\n  autobindMe = () => {};\n  okBindMe = (): number => { return 12; };\n\n  // Function comment\n  _renderRange = (text: string, range, bla: Promise<string>): ReactElement<any> => {\n    var self = this;\n\n    self.okBindMe();\n    call(self.autobindMe);\n\n    var type = rage.type;\n    var {highlightEntities} = this.props;\n\n    if (type === 'ImageAtRange') {\n      return this._renderImageRange(text, range);\n    }\n\n    if (this.props.linkifyEntities) {\n      text =\n        <Link href={usersURI}>\n          {text}\n        </Link>;\n    } else {\n      text = <span>{text}</span>;\n    }\n\n    return text;\n  };\n\n  /* This is a comment */\n  render() {\n    var content = this.props.text;\n    return (\n      <BaseText\n        {...this.props}\n        textRenderer={this._renderText}\n        rangeRenderer={this._renderRange}\n        text={content.text}\n      />\n    );\n  }\n}\n\nvar MyComponent4 = React.createClass({\n  foo: callMeMaybe(),\n  render: function() {},\n});\n\nmodule.exports = Relay.createContainer(MyComponent, {\n  queries: {\n    me: Relay.graphql`this is not graphql`,\n  },\n});\n\nclass MyComponent5 extends React.Component {\n  static defaultProps = {\n    thisIs: true,\n    andThisIs: false,\n  };\n\n  state = {\n    todos: [],\n  };\n\n  renderTodo = (): ReactElement<any> => {\n    return (\n      <div>\n        {this.state.todos.map((item) => <p key={item.id}>{item.text}</p>)}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>TODOs</h1>\n        {this.renderTodo()}\n      </div>\n    );\n  }\n}\n\nclass GoodName extends React.Component {\n  static displayName = 'GoodName';\n\n  render() {\n    return <div/>;\n  }\n}\n\nclass SingleArgArrowFunction extends React.Component {\n  formatInt = (/*number*/ num) => /*string*/ {\n    return 'foobar';\n  };\n\n  render() {\n    return <div/>;\n  }\n}\n\nvar mySpec = {};\nvar NotAnObjectLiteral = React.createClass(mySpec);\n\nvar WaitWhat = React.createClass();\n\nclass HasSpreadArgs extends React.Component {\n  _helper = (...args) => {\n    return args;\n  };\n\n  _helper2 = (a, b, c, ...args) => {\n    return args.concat(a);\n  };\n\n  _helper3 = (a: number, ...args: Array<string>) => {\n    return args.concat('' + a);\n  };\n\n  render() {\n    return <div/>;\n  }\n}\n\nclass HasDefaultArgs extends React.Component {\n  _helper = (foo = 12) => {\n    return foo;\n  };\n\n  _helper2 = ({foo: number = 12, abc}, bar: string = 'hey', ...args: Array<string>) => {\n    return args.concat(foo, bar);\n  };\n\n  render() {\n    return <div/>;\n  }\n}\n\nclass ManyArgs extends React.Component {\n  _helper = (foo = 12) => {\n    return foo;\n  };\n\n  _helper2 = (\n    {foo: number = 12, abc},\n    bar: string = 'hey',\n    x: number,\n    y: number,\n    ...args: Array<string>\n  ) => {\n    return args.concat(foo, bar);\n  };\n\n  render() {\n    return <div/>;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-property-field.input.js":"const React = require('react');\n\nconst Component1 = React.createClass({\n  statics: {\n    booleanPrim: true,\n    numberPrim: 12,\n    stringPrim: 'foo',\n    nullPrim: null,\n    undefinedPrim: undefined,\n  },\n  booleanPrim: true,\n  numberPrim: 12,\n  stringPrim: 'foo',\n  nullPrim: null,\n  undefinedPrim: undefined,\n\n  foobar: function() {\n    return 123;\n  },\n\n  componentDidMount: function() {\n    console.log('hello');\n  },\n\n  render: function() {\n    return <div />;\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-property-field.output.js":"const React = require('react');\n\nclass Component1 extends React.Component {\n  static booleanPrim = true;\n  static numberPrim = 12;\n  static stringPrim = 'foo';\n  static nullPrim = null;\n  static undefinedPrim = undefined;\n  booleanPrim = true;\n  numberPrim = 12;\n  stringPrim = 'foo';\n  nullPrim = null;\n  undefinedPrim = undefined;\n\n  foobar = () => {\n    return 123;\n  };\n\n  componentDidMount() {\n    console.log('hello');\n  }\n\n  render() {\n    return <div />;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-pure-mixin1.input.js":"// dont remove me\nvar ReactComponentWithPureRenderMixin = require('ReactComponentWithPureRenderMixin');\nvar React = require('React');\n\nvar ComponentWithOnlyPureRenderMixin = React.createClass({\n  mixins: [ReactComponentWithPureRenderMixin],\n\n  getInitialState: function() {\n    return {\n      counter: this.props.initialNumber + 1,\n    };\n  },\n\n  render: function() {\n    return (\n      <div>{this.state.counter}</div>\n    );\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-pure-mixin1.output.js":"// dont remove me\nvar React = require('React');\n\nclass ComponentWithOnlyPureRenderMixin extends React.PureComponent {\n  state = {\n    counter: this.props.initialNumber + 1,\n  };\n\n  render() {\n    return (\n      <div>{this.state.counter}</div>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-pure-mixin2.input.js":"/**\n * Copyright 2004-present Facebook. All Rights Reserved.\n *\n * @providesModule Bar\n * @typechecks\n * @flow\n */\nimport WhateverYouCallIt from 'react-addons-pure-render-mixin';\nimport React from 'React';\nimport dontPruneMe from 'foobar';\n\nvar ComponentWithOnlyPureRenderMixin = React.createClass({\n  mixins: [WhateverYouCallIt],\n\n  getInitialState: function() {\n    return {\n      counter: this.props.initialNumber + 1,\n    };\n  },\n\n  render: function() {\n    dontPruneMe();\n    return (\n      <div>{this.state.counter}</div>\n    );\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-pure-mixin2.output.js":"/**\n * Copyright 2004-present Facebook. All Rights Reserved.\n *\n * @providesModule Bar\n * @typechecks\n * @flow\n */\nimport React from 'React';\nimport dontPruneMe from 'foobar';\n\nclass ComponentWithOnlyPureRenderMixin extends React.PureComponent {\n  state = {\n    counter: this.props.initialNumber + 1,\n  };\n\n  render() {\n    dontPruneMe();\n    return (\n      <div>{this.state.counter}</div>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-pure-mixin3.input.js":"// for this file we disable the `pure-component` option\n// so the output should be just nothing\nvar React = require('React');\nvar ReactComponentWithPureRenderMixin = require('ReactComponentWithPureRenderMixin');\n\nvar ComponentWithOnlyPureRenderMixin = React.createClass({\n  mixins: [ReactComponentWithPureRenderMixin],\n\n  getInitialState: function() {\n    return {\n      counter: this.props.initialNumber + 1,\n    };\n  },\n\n  render: function() {\n    return (\n      <div>{this.state.counter}</div>\n    );\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-pure-mixin3.output.js":"","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-pure-mixin4.input.js":"/**\n * Copyright 2004-present Facebook. All rights reserved.\n *\n * @providesModule HelloGuys\n * @fbt {\"foo\": \"bar\"}\n * @flow\n * @typechecks\n */\n\n'use strict';\n\nconst React = require('React');\nconst ReactComponentWithPureRenderMixin = require('ReactComponentWithPureRenderMixin');\n\n/**\n * just a description here\n */\nconst HelloGuys = React.createClass({\n  mixins: [\n    ReactComponentWithPureRenderMixin,\n  ],\n\n  propTypes: {},\n\n  render(): ReactElement<any> {\n    return (\n      <div>\n        wassup\n      </div>\n    );\n  },\n});\n\nmodule.exports = HelloGuys;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-pure-mixin4.output.js":"/**\n * Copyright 2004-present Facebook. All rights reserved.\n *\n * @providesModule HelloGuys\n * @fbt {\"foo\": \"bar\"}\n * @flow\n * @typechecks\n */\n\n'use strict';\n\nconst React = require('React');\n\n/**\n * just a description here\n */\nclass HelloGuys extends React.PureComponent {\n  props: {};\n  static propTypes = {};\n\n  render(): ReactElement<any> {\n    return (\n      <div>\n        wassup\n      </div>\n    );\n  }\n}\n\nmodule.exports = HelloGuys;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-test2.input.js":"'use strict';\n\nvar React = require('React');\nvar ReactComponentWithPureRenderMixin = require('ReactComponentWithPureRenderMixin');\nvar FooBarMixin = require('FooBarMixin');\n\nvar ComponentWithNonSimpleInitialState = React.createClass({\n  statics: {\n    iDontKnowWhyYouNeedThis: true, // but comment it\n    foo: 'bar',\n    dontBindMe: function(count: number): any {\n      return this;\n    },\n  },\n\n  getInitialState: function() {\n    return {\n      counter: this.props.initialNumber + 1,\n    };\n  },\n\n  render: function() {\n    return (\n      <div>{this.state.counter}</div>\n    );\n  },\n});\n\n// Comment\nmodule.exports = React.createClass({\n  propTypes: {\n    foo: React.PropTypes.bool,\n  },\n\n  getDefaultProps: function() {\n    return {\n      foo: 12,\n    };\n  },\n\n  getInitialState: function() { // non-simple getInitialState\n    var data = 'bar';\n    return {\n      bar: data,\n    };\n  },\n\n  render: function() {\n    return <div />;\n  },\n});\n\nvar ComponentWithInconvertibleMixins = React.createClass({\n  mixins: [ReactComponentWithPureRenderMixin, FooBarMixin],\n\n  getInitialState: function() {\n    return {\n      counter: this.props.initialNumber + 1,\n    };\n  },\n\n  render: function() {\n    return (\n      <div>{this.state.counter}</div>\n    );\n  },\n});\n\nvar listOfInconvertibleMixins = [ReactComponentWithPureRenderMixin, FooBarMixin];\n\nvar ComponentWithInconvertibleMixins2 = React.createClass({\n  mixins: listOfInconvertibleMixins,\n\n  getInitialState: function() {\n    return {\n      counter: this.props.initialNumber + 1,\n    };\n  },\n\n  render: function() {\n    return (\n      <div>{this.state.counter}</div>\n    );\n  },\n});\n\n// taken from https://facebook.github.io/react/docs/context.html#updating-context\nvar MediaQuery = React.createClass({\n  childContextTypes: {\n    type: React.PropTypes.string,\n  },\n\n  getInitialState: function() {\n    return {type:'desktop'};\n  },\n\n  getChildContext: function() {\n    return {type: this.state.type};\n  },\n\n  componentDidMount: function() {\n    const checkMediaQuery = () => {\n      const type = window.matchMedia('(min-width: 1025px)').matches ? 'desktop' : 'mobile';\n      if (type !== this.state.type) {\n        this.setState({type});\n      }\n    };\n\n    window.addEventListener('resize', checkMediaQuery);\n    checkMediaQuery();\n  },\n\n  render: function() {\n    return this.props.children;\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-test2.output.js":"'use strict';\n\nvar React = require('React');\nvar ReactComponentWithPureRenderMixin = require('ReactComponentWithPureRenderMixin');\nvar FooBarMixin = require('FooBarMixin');\n\nclass ComponentWithNonSimpleInitialState extends React.Component {\n  static iDontKnowWhyYouNeedThis = true; // but comment it\n  static foo = 'bar';\n\n  static dontBindMe(count: number): any {\n    return this;\n  }\n\n  state = {\n    counter: this.props.initialNumber + 1,\n  };\n\n  render() {\n    return (\n      <div>{this.state.counter}</div>\n    );\n  }\n}\n\n// Comment\nmodule.exports = class extends React.Component {\n  static propTypes = {\n    foo: React.PropTypes.bool,\n  };\n\n  static defaultProps = {\n    foo: 12,\n  };\n\n  constructor(props) {\n    super(props);\n    // non-simple getInitialState\n    var data = 'bar';\n\n    this.state = {\n      bar: data,\n    };\n  }\n\n  render() {\n    return <div />;\n  }\n};\n\nvar ComponentWithInconvertibleMixins = React.createClass({\n  mixins: [ReactComponentWithPureRenderMixin, FooBarMixin],\n\n  getInitialState: function() {\n    return {\n      counter: this.props.initialNumber + 1,\n    };\n  },\n\n  render: function() {\n    return (\n      <div>{this.state.counter}</div>\n    );\n  },\n});\n\nvar listOfInconvertibleMixins = [ReactComponentWithPureRenderMixin, FooBarMixin];\n\nvar ComponentWithInconvertibleMixins2 = React.createClass({\n  mixins: listOfInconvertibleMixins,\n\n  getInitialState: function() {\n    return {\n      counter: this.props.initialNumber + 1,\n    };\n  },\n\n  render: function() {\n    return (\n      <div>{this.state.counter}</div>\n    );\n  },\n});\n\n// taken from https://facebook.github.io/react/docs/context.html#updating-context\nclass MediaQuery extends React.Component {\n  static childContextTypes = {\n    type: React.PropTypes.string,\n  };\n\n  state = {type:'desktop'};\n\n  getChildContext() {\n    return {type: this.state.type};\n  }\n\n  componentDidMount() {\n    const checkMediaQuery = () => {\n      const type = window.matchMedia('(min-width: 1025px)').matches ? 'desktop' : 'mobile';\n      if (type !== this.state.type) {\n        this.setState({type});\n      }\n    };\n\n    window.addEventListener('resize', checkMediaQuery);\n    checkMediaQuery();\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-top-comment.input.js":"/**\n * Copyright 2004-present Facebook. All Rights Reserved.\n *\n * @providesModule FooBar\n * @typechecks\n * @flow\n */\nvar ReactComponentWithPureRenderMixin = require('ReactComponentWithPureRenderMixin');\nvar React = require('React');\n\nvar ComponentWithOnlyPureRenderMixin = React.createClass({\n  mixins: [ReactComponentWithPureRenderMixin],\n\n  getInitialState: function() {\n    return {\n      counter: this.props.initialNumber + 1,\n    };\n  },\n\n  render: function() {\n    return (\n      <div>{this.state.counter}</div>\n    );\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/class-top-comment.output.js":"/**\n * Copyright 2004-present Facebook. All Rights Reserved.\n *\n * @providesModule FooBar\n * @typechecks\n * @flow\n */\nvar React = require('React');\n\nclass ComponentWithOnlyPureRenderMixin extends React.PureComponent {\n  state = {\n    counter: this.props.initialNumber + 1,\n  };\n\n  render() {\n    return (\n      <div>{this.state.counter}</div>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-allow-member-expression.input.js":"var React = require('react/addons');\n\nReact.createElement(React.addons.CSSTransitionGroup, null, '');\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-allow-member-expression.output.js":"var React = require('react/addons');\n\n<React.addons.CSSTransitionGroup></React.addons.CSSTransitionGroup>;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-call-as-children.input.js":"var React = require('react/addons');\n\nReact.createElement('div', {}, foo());\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-call-as-children.output.js":"var React = require('react/addons');\n\n<div>{foo()}</div>;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-call-expression-as-prop.input.js":"var React = require('react/addons');\n\nReact.createElement('div', getProps(), 'foo');\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-call-expression-as-prop.output.js":"var React = require('react/addons');\n\n<div {...getProps()}>foo</div>;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-children.input.js":"var React = require('React');\n\nvar a = React.createElement(\n  Foo,\n  null,\n  React.createElement('div', { foo: 'bar' }),\n  React.createElement(\n    'span',\n    null,\n    'blah'\n  )\n);\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-children-literal.input.js":"var React = require('React');\n\nReact.createElement('div', null, 'foo');\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-children-literal.output.js":"var React = require('React');\n\n<div>foo</div>;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-children-map.input.js":"var React = require('React');\n\nReact.createElement(\n  'div',\n  null,\n  foo.map(function() {})\n);\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-children-map.output.js":"var React = require('React');\n\n<div>{foo.map(function() {})}</div>;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-children-mixed-empty-string.input.js":"var React = require('react');\n\na = 'foo';\n\nReact.createElement(\n  'div',\n  null,\n  a,\n  ' ',\n  a\n);\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-children-mixed-empty-string.output.js":"var React = require('react');\n\na = 'foo';\n\n<div>{a} {a}</div>;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-children.output.js":"var React = require('React');\n\nvar a = <Foo><div foo=\"bar\" /><span>blah</span></Foo>;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-gt-lt-entities.input.js":"var React = require('React');\n\nReact.createElement('div', null, '\\x3C\\x3E');\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-gt-lt-entities.output.js":"var React = require('React');\n\n<div>&lt;&gt;</div>;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-literal-prop.input.js":"var React = require('React');\n\nReact.createElement(Foo, {'foo': 'bar'});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-literal-prop.output.js":"var React = require('React');\n\n<Foo foo=\"bar\" />;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-member-expression-as-prop.input.js":"var React = require('react/addons');\n\nReact.createElement('div', this.props, 'foo');\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-member-expression-as-prop.output.js":"var React = require('react/addons');\n\n<div {...this.props}>foo</div>;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-no-props-arg.input.js":"var React = require('React');\n\nvar a = React.createElement(Foo);\nvar b = React.createElement('div');\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-no-props-arg.output.js":"var React = require('React');\n\nvar a = <Foo />;\nvar b = <div />;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-no-react.input.js":"var React = require('foo');\n\nReact.createElement(Foo, 'la');\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-no-react.output.js":"","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-object-assign.input.js":"var React = require('react/addons');\n\nReact.createElement(Foo, Object.assign({\n  'foo': 'bar',\n}, props, {\n  'bar': 'foo',\n}));\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-object-assign.output.js":"var React = require('react/addons');\n\n<Foo foo=\"bar\" {...props} bar=\"foo\" />;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-preserve-comments.input.js":"var React = require('react');\n\nconst render = () => {\n  return /*1*/React/*2*/./*3*/createElement/*4*/(\n    /*5*/'div'/*6*/,/*7*/\n    {\n      /*8*/className/*9*/: /*10*/'foo'/*11*/,/*12*/\n      /*13*/onClick/*14*/:/*15*/ this.handleClick/*16*/, //17\n    }/*18*/,\n    /*19*/React.createElement(/*20*/TodoList/*21*/./*22*/Item/*23*/)/*24*/, //25\n    React.createElement(\n      'span',\n      /*26*/getProps()/*27*/\n    ),\n    React.createElement('input', /*28*/null/*29*/)\n  );\n};\n\nconst render2 = () => {\n  return React.createElement(\n    'div', {\n      className: 'foo',  // Prop comment.\n    },\n    'hello' // Child string comment.\n  );\n};\n\nconst render3 = () => {\n  return React.createElement(\n    'div',\n    null,\n    React.createElement('span') // Child element comment.\n  );\n};\n\nconst render4 = () => {\n  return React.createElement(Foo, {/* No props to see here! */});\n};\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-preserve-comments.output.js":"var React = require('react');\n\nconst render = () => {\n  return /*1*//*4*//*2*//*3*/</*5*/div/*6*//*7*//*18*/\n    /*8*/className/*9*/=/*10*/\"foo\"/*11*/\n    /*12*/\n    /*13*///17\n    onClick/*14*/={/*15*/ this.handleClick}/*16*/>{/*19*///25\n    </*20*/TodoList/*21*/./*22*/Item/*23*/ />/*24*/}<span {.../*26*/getProps()/*27*/} /><input /*28*//*29*/ /></div>;\n};\n\nconst render2 = () => {\n  return <div\n    // Prop comment.\n    className=\"foo\">{// Child string comment.\n    'hello'}</div>;\n};\n\nconst render3 = () => {\n  return <div>{// Child element comment.\n    <span />}</div>;\n};\n\nconst render4 = () => {\n  return <Foo/* No props to see here! */ />;\n};\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-props-array.input.js":"var React = require('react');\n\nvar foo = React.createElement(\n  'div',\n  {\n    array: [],\n  }\n);\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-props-array.output.js":"var React = require('react');\n\nvar foo = <div array={[]} />;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-props-boolean.input.js":"var React = require('React');\n\nvar a = React.createElement('div', { a: true });\nvar a = React.createElement('div', { a: 4 });\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-props-boolean.output.js":"var React = require('React');\n\nvar a = <div a={true} />;\nvar a = <div a={4} />;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-props.input.js":"var React = require('React');\n\nfunction foo() {\n  var a = React.createElement(Foo, { foo: 'bar', bar: this.state.baz });\n  var b = React.createElement('div', { foo: 'bar', bar: this.state.baz });\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-props.output.js":"var React = require('React');\n\nfunction foo() {\n  var a = <Foo foo=\"bar\" bar={this.state.baz} />;\n  var b = <div foo=\"bar\" bar={this.state.baz} />;\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-react-spread.input.js":"var React = require('react/addons');\n\nReact.createElement(Foo, React.__spread({\n  'foo': 'bar',\n}, props, {\n  'bar': 'foo',\n}));\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-react-spread.output.js":"var React = require('react/addons');\n\n<Foo foo=\"bar\" {...props} bar=\"foo\" />;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-single-element.input.js":"var React = require('React');\n\nvar a = React.createElement(Foo, null);\nvar b = React.createElement('div', null);\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-single-element.output.js":"var React = require('React');\n\nvar a = <Foo />;\nvar b = <div />;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-spread.input.js":"var React = require('React');\n\nReact.createElement(Foo, {foo: 'bar', ...someObject});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-spread.output.js":"var React = require('React');\n\n<Foo foo=\"bar\" {...someObject} />;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-spread-props.input.js":"var React = require('React');\n\nReact.createElement(Constructor, props);\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/create-element-to-jsx-spread-props.output.js":"var React = require('React');\n\n<Constructor {...props} />;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/export-default-class.input.js":"/*eslint-disable no-extra-semi*/\n\n'use strict';\n\nimport React from 'React';\n\nexport default React.createClass({\n  getInitialState: function() {\n    return {\n      foo: 'bar',\n    };\n  },\n\n  propTypes: {\n    foo: React.PropTypes.string,\n  },\n\n  render: function() {\n    return <div />;\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/export-default-class.output.js":"/*eslint-disable no-extra-semi*/\n\n'use strict';\n\nimport React from 'React';\n\nexport default class extends React.Component {\n  static propTypes = {\n    foo: React.PropTypes.string,\n  };\n\n  state = {\n    foo: 'bar',\n  };\n\n  render() {\n    return <div />;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/findDOMNode.input.js":"'use strict';\n\nvar React = require('React');\n\nvar Composer = React.createClass({\n  componentWillReceiveProps: function(nextProps) {\n    this.getDOMNode();\n    return foo(this.refs.input.getDOMNode());\n  },\n\n  foo: function() {\n    var ref = 'foo';\n    var element = this.refs[ref];\n    var domNode = element.getDOMNode();\n  },\n\n  bar: function() {\n    var thing = this.refs.foo;\n    thing.getDOMNode();\n  },\n\n  foobar: function() {\n    passThisOn(this.refs.main.refs.list.getDOMNode());\n  },\n});\n\nvar SomeDialog = React.createClass({\n  render: function() {\n    call(this.refs.SomeThing);\n    return (\n      <div />\n    );\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/findDOMNode.output.js":"'use strict';\n\nvar React = require('React');\n\nvar Composer = React.createClass({\n  componentWillReceiveProps: function(nextProps) {\n    React.findDOMNode(this);\n    return foo(React.findDOMNode(this.refs.input));\n  },\n\n  foo: function() {\n    var ref = 'foo';\n    var element = this.refs[ref];\n    var domNode = React.findDOMNode(element);\n  },\n\n  bar: function() {\n    var thing = this.refs.foo;\n    React.findDOMNode(thing);\n  },\n\n  foobar: function() {\n    passThisOn(React.findDOMNode(this.refs.main.refs.list));\n  },\n});\n\nvar SomeDialog = React.createClass({\n  render: function() {\n    call(this.refs.SomeThing);\n    return (\n      <div />\n    );\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/pure-component2.input.js":"'use strict';\n\nvar React = require('React');\n\nfunction render() {\n  return <div/>;\n}\n\nclass Pure extends React.Component {\n  render() {\n    return <div className={this.props.foo} />;\n  }\n}\n\nclass Impure extends React.Component {\n  componentWillMount() {\n    // such impure\n  }\n  render() {\n    return <div className={this.props.foo} />;\n  }\n}\n\nvar A = props => <div className={props.foo} />;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/pure-component2.output.js":"'use strict';\n\nvar React = require('React');\n\nfunction render() {\n  return <div/>;\n}\n\nconst Pure = props => {\n  return <div className={props.foo} />;\n};\n\nclass Impure extends React.Component {\n  componentWillMount() {\n    // such impure\n  }\n  render() {\n    return <div className={this.props.foo} />;\n  }\n}\n\nvar A = props => <div className={props.foo} />;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/pure-component.input.js":"'use strict';\n\nvar React = require('React');\n\nfunction render() {\n  return <div/>;\n}\n\nclass Pure extends React.Component {\n  render() {\n    return <div className={this.props.foo} />;\n  }\n}\n\nclass Impure extends React.Component {\n  componentWillMount() {\n    // such impure\n  }\n  render() {\n    return <div className={this.props.foo} />;\n  }\n}\n\nclass ImpureWithRef extends React.Component {\n  render() {\n    return (\n      <div>\n        <span ref=\"spanasaurus\" />\n      </div>\n    );\n  }\n}\n\nvar A = props => <div className={props.foo} />;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/pure-component.output.js":"'use strict';\n\nvar React = require('React');\n\nfunction render() {\n  return <div/>;\n}\n\nfunction Pure(props) {\n  return <div className={props.foo} />;\n}\n\nclass Impure extends React.Component {\n  componentWillMount() {\n    // such impure\n  }\n  render() {\n    return <div className={this.props.foo} />;\n  }\n}\n\nclass ImpureWithRef extends React.Component {\n  render() {\n    return (\n      <div>\n        <span ref=\"spanasaurus\" />\n      </div>\n    );\n  }\n}\n\nvar A = props => <div className={props.foo} />;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/pure-render-mixin2.input.js":"var React = require('react/addons');\n\nvar PureRenderMixin = React.addons.PureRenderMixin;\n\nvar MyComponent = React.createClass({\n  mixins: [PureRenderMixin],\n\n  render: function() {\n    return <div />;\n  },\n});\n\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/pure-render-mixin2.output.js":"var React = require('react/addons');\n\nvar MyComponent = React.createClass({\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return React.addons.shallowCompare(this, nextProps, nextState);\n  },\n\n  render: function() {\n    return <div />;\n  },\n});\n\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/pure-render-mixin3.input.js":"var React = require('react/addons');\n\nvar Foo = 'Foo';\nvar PureRenderMixin = React.addons.PureRenderMixin;\n\nvar MyComponent = React.createClass({\n  mixins: [PureRenderMixin],\n\n  render: function() {\n    return <div />;\n  },\n});\n\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/pure-render-mixin3.output.js":"var React = require('react/addons');\n\nvar Foo = 'Foo';\n\nvar MyComponent = React.createClass({\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return React.addons.shallowCompare(this, nextProps, nextState);\n  },\n\n  render: function() {\n    return <div />;\n  },\n});\n\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/pure-render-mixin4.input.js":"var React = require('React');\nvar ReactComponentWithPureRenderMixin = require('ReactComponentWithPureRenderMixin');\n\nvar MyComponent = React.createClass({\n  mixins: [ReactComponentWithPureRenderMixin],\n\n  render: function() {\n    return <div />;\n  },\n});\n\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/pure-render-mixin4.output.js":"var React = require('React');\n\nvar MyComponent = React.createClass({\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return React.addons.shallowCompare(this, nextProps, nextState);\n  },\n\n  render: function() {\n    return <div />;\n  },\n});\n\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/pure-render-mixin.input.js":"var React = require('react/addons');\n\nvar PureRenderMixin = React.addons.PureRenderMixin;\n\nvar MyComponent = React.createClass({\n  mixins: [PureRenderMixin],\n\n  render: function() {\n    return <div />;\n  },\n});\n\nvar MyMixedComponent = React.createClass({\n  mixins: [PureRenderMixin, SomeOtherMixin],\n\n  render: function() {\n    return <div />;\n  },\n});\n\nvar MyFooComponent = React.createClass({\n  mixins: [PureRenderMixin, SomeOtherMixin],\n\n  render: function() {\n    return <div />;\n  },\n\n  foo: function() {\n\n  },\n});\n\nvar MyStupidComponent = React.createClass({\n  mixins: [PureRenderMixin],\n\n  shouldComponentUpdate: function() {\n    return !!'wtf is this doing here?';\n  },\n\n  render: function() {\n    return <div />;\n  },\n});\n\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/pure-render-mixin.output.js":"var React = require('react/addons');\n\nvar PureRenderMixin = React.addons.PureRenderMixin;\n\nvar MyComponent = React.createClass({\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return React.addons.shallowCompare(this, nextProps, nextState);\n  },\n\n  render: function() {\n    return <div />;\n  },\n});\n\nvar MyMixedComponent = React.createClass({\n  mixins: [SomeOtherMixin],\n\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return React.addons.shallowCompare(this, nextProps, nextState);\n  },\n\n  render: function() {\n    return <div />;\n  },\n});\n\nvar MyFooComponent = React.createClass({\n  mixins: [SomeOtherMixin],\n\n  render: function() {\n    return <div />;\n  },\n\n  foo: function() {\n\n  },\n\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return React.addons.shallowCompare(this, nextProps, nextState);\n  },\n});\n\nvar MyStupidComponent = React.createClass({\n  mixins: [PureRenderMixin],\n\n  shouldComponentUpdate: function() {\n    return !!'wtf is this doing here?';\n  },\n\n  render: function() {\n    return <div />;\n  },\n});\n\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/sort-comp2.input.js":"var React = require('react/addons');\n\nconst propTypes = {};\n\n// comment above class\nclass MyComponent extends React.Component {\n  // comment at top of createClass\n  // this will be attached to first method\n\n  render() {\n    return <div />;\n  }\n\n  // comment on componentDidMount\n  componentDidMount() {\n  }\n\n  static someStaticThing() {\n    // should bundle with other statics\n  }\n\n  renderFoo() {\n    // other render* function\n  }\n\n  renderBar() {\n    // should come before renderFoo\n  }\n\n  static aStaticThing() {\n    // should come first\n  }\n\n  myOwnMethod(foo) {\n    // comment within method\n  }\n\n}\n\nMyComponent.propTypes = propTypes;\n\n/* comment at end */\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/sort-comp2.output.js":"var React = require('react/addons');\n\nconst propTypes = {};\n\n// comment above class\nclass MyComponent extends React.Component {\n  static aStaticThing() {\n    // should come first\n  }\n\n  static someStaticThing() {\n    // should bundle with other statics\n  }\n\n  // comment on componentDidMount\n  componentDidMount() {\n  }\n\n  myOwnMethod(foo) {\n    // comment within method\n  }\n\n  renderBar() {\n    // should come before renderFoo\n  }\n\n  renderFoo() {\n    // other render* function\n  }\n\n  // comment at top of createClass\n  // this will be attached to first method\n\n  render() {\n    return <div />;\n  }\n\n}\n\nMyComponent.propTypes = propTypes;\n\n/* comment at end */\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/sort-comp3.input.js":"import React, { Component } from 'react/addons';\n\nconst propTypes = {};\n\n// comment above class\nclass MyComponent extends Component {\n  // comment at top of createClass\n  // this will be attached to first method\n\n  render() {\n    return <div />;\n  }\n\n  // comment on componentDidMount\n  componentDidMount() {\n  }\n\n  static someStaticThing() {\n    // should bundle with other statics\n  }\n\n  renderFoo() {\n    // other render* function\n  }\n\n  renderBar() {\n    // should come before renderFoo\n  }\n\n  static aStaticThing() {\n    // should come first\n  }\n\n  myOwnMethod(foo) {\n    // comment within method\n  }\n\n}\n\nMyComponent.propTypes = propTypes;\n\n/* comment at end */\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/sort-comp3.output.js":"import React, { Component } from 'react/addons';\n\nconst propTypes = {};\n\n// comment above class\nclass MyComponent extends Component {\n  static aStaticThing() {\n    // should come first\n  }\n\n  static someStaticThing() {\n    // should bundle with other statics\n  }\n\n  // comment on componentDidMount\n  componentDidMount() {\n  }\n\n  myOwnMethod(foo) {\n    // comment within method\n  }\n\n  renderBar() {\n    // should come before renderFoo\n  }\n\n  renderFoo() {\n    // other render* function\n  }\n\n  // comment at top of createClass\n  // this will be attached to first method\n\n  render() {\n    return <div />;\n  }\n\n}\n\nMyComponent.propTypes = propTypes;\n\n/* comment at end */\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/sort-comp.input.js":"var React = require('react/addons');\n\n// comment above createClass\nvar MyComponent = React.createClass({\n  // comment at top of createClass\n  // this will be attached to first method\n\n  render: function() {\n    return <div />;\n  },\n\n  mixins: [PureRenderMixin],\n\n  // comment on componentDidMount\n  componentDidMount() {\n  },\n\n  renderFoo() {\n    // other render* function\n  },\n\n  renderBar() {\n    // should come before renderFoo\n  },\n\n  myOwnMethod(foo) {\n    // comment within method\n  },\n\n  propTypes: {\n    foo: bar, // comment on prop\n  },\n\n});\n\n/* comment at end */\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/sort-comp.output.js":"var React = require('react/addons');\n\n// comment above createClass\nvar MyComponent = React.createClass({\n  propTypes: {\n    foo: bar, // comment on prop\n  },\n\n  mixins: [PureRenderMixin],\n\n  // comment on componentDidMount\n  componentDidMount() {\n  },\n\n  myOwnMethod(foo) {\n    // comment within method\n  },\n\n  renderBar() {\n    // should come before renderFoo\n  },\n\n  renderFoo() {\n    // other render* function\n  },\n\n  // comment at top of createClass\n  // this will be attached to first method\n\n  render: function() {\n    return <div />;\n  },\n\n});\n\n/* comment at end */\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/utils/array-polyfills.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n /*eslint-disable no-extend-native*/\n\n'use strict';\n\nfunction findIndex(predicate, context) {\n  if (this == null) {\n    throw new TypeError(\n      'Array.prototype.findIndex called on null or undefined'\n    );\n  }\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate must be a function');\n  }\n  var list = Object(this);\n  /* eslint-disable no-bitwise */\n  var length = list.length >>> 0;\n  /* eslint-enable no-bitwise */\n  for (var i = 0; i < length; i++) {\n    if (predicate.call(context, list[i], i, list)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nif (!Array.prototype.findIndex) {\n  Array.prototype.findIndex = findIndex;\n}\n\nif (!Array.prototype.find) {\n  Array.prototype.find = function(predicate, context) {\n    if (this == null) {\n      throw new TypeError('Array.prototype.find called on null or undefined');\n    }\n    var index = findIndex.call(this, predicate, context);\n    return index === -1 ? undefined : this[index];\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/utils/ReactUtils.js":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nmodule.exports = function(j) {\n  const REACT_CREATE_CLASS_MEMBER_EXPRESSION = {\n    type: 'MemberExpression',\n    object: {\n      name: 'React',\n    },\n    property: {\n      name: 'createClass',\n    },\n  };\n\n  // ---------------------------------------------------------------------------\n  // Checks if the file requires a certain module\n  const hasModule = (path, module) =>\n    path\n      .findVariableDeclarators()\n      .filter(j.filters.VariableDeclarator.requiresModule(module))\n      .size() === 1 ||\n    path\n      .find(j.ImportDeclaration, {\n        type: 'ImportDeclaration',\n        source: {\n          type: 'Literal',\n        },\n      })\n      .filter(declarator => declarator.value.source.value === module)\n      .size() === 1;\n\n  const hasReact = path => (\n    hasModule(path, 'React') ||\n    hasModule(path, 'react') ||\n    hasModule(path, 'react/addons') ||\n    hasModule(path, 'react-native')\n  );\n\n  // ---------------------------------------------------------------------------\n  // Finds all variable declarations that call React.createClass\n  const findReactCreateClassCallExpression = path =>\n    j(path).find(j.CallExpression, {\n      callee: REACT_CREATE_CLASS_MEMBER_EXPRESSION,\n    });\n\n  const findReactCreateClass = path =>\n    path\n      .findVariableDeclarators()\n      .filter(decl => findReactCreateClassCallExpression(decl).size() > 0);\n\n  const findReactCreateClassExportDefault = path =>\n    path.find(j.ExportDeclaration, {\n      default: true,\n      declaration: {\n        type: 'CallExpression',\n        callee: REACT_CREATE_CLASS_MEMBER_EXPRESSION,\n      },\n    });\n\n  const findReactCreateClassModuleExports = path =>\n    path\n      .find(j.AssignmentExpression, {\n        left: {\n          type: 'MemberExpression',\n          object: {\n            type: 'Identifier',\n            name: 'module',\n          },\n          property: {\n            type: 'Identifier',\n            name: 'exports',\n          },\n        },\n        right: {\n          type: 'CallExpression',\n          callee: REACT_CREATE_CLASS_MEMBER_EXPRESSION,\n        },\n      });\n\n  const getReactCreateClassSpec = classPath => {\n    const {value} = classPath;\n    const args = (value.init || value.right || value.declaration).arguments;\n    if (args && args.length) {\n      const spec = args[0];\n      if (spec.type === 'ObjectExpression' && Array.isArray(spec.properties)) {\n        return spec;\n      }\n    }\n    return null;\n  };\n\n  // ---------------------------------------------------------------------------\n  // Finds alias for React.Component if used as named import.\n  const findReactComponentName = path => {\n    const reactImportDeclaration = path\n      .find(j.ImportDeclaration, {\n        type: 'ImportDeclaration',\n        source: {\n          type: 'Literal',\n        },\n      })\n      .filter(importDeclaration => hasReact(path));\n\n    const componentImportSpecifier = reactImportDeclaration\n      .find(j.ImportSpecifier, {\n        type: 'ImportSpecifier',\n        imported: {\n          type: 'Identifier',\n          name: 'Component',\n        },\n      }).at(0);\n\n    const paths = componentImportSpecifier.paths();\n    return paths.length\n      ? paths[0].value.local.name\n      : undefined;\n  };\n\n  // Finds all classes that extend React.Component\n  const findReactES6ClassDeclaration = path => {\n    const componentImport = findReactComponentName(path);\n    const selector = componentImport\n      ? {\n        superClass: {\n          type: 'Identifier',\n          name: componentImport,\n        },\n      }\n      : {\n        superClass: {\n          type: 'MemberExpression',\n          object: {\n            type: 'Identifier',\n            name: 'React',\n          },\n          property: {\n            type: 'Identifier',\n            name: 'Component',\n          },\n        },\n      };\n\n    return path\n     .find(j.ClassDeclaration, selector);\n  };\n\n  // ---------------------------------------------------------------------------\n  // Checks if the React class has mixins\n  const isMixinProperty = property => {\n    const key = property.key;\n    const value = property.value;\n    return (\n      key.name === 'mixins' &&\n      value.type === 'ArrayExpression' &&\n      Array.isArray(value.elements) &&\n      value.elements.length\n    );\n  };\n\n  const hasMixins = classPath => {\n    const spec = getReactCreateClassSpec(classPath);\n    return spec && spec.properties.some(isMixinProperty);\n  };\n\n  // ---------------------------------------------------------------------------\n  // Others\n  const getClassExtendReactSpec = classPath => classPath.value.body;\n\n  const createCreateReactClassCallExpression = properties =>\n    j.callExpression(\n      j.memberExpression(\n        j.identifier('React'),\n        j.identifier('createClass'),\n        false\n      ),\n      [j.objectExpression(properties)]\n    );\n\n  const getComponentName =\n    classPath => classPath.node.id && classPath.node.id.name;\n\n  // ---------------------------------------------------------------------------\n  // Direct methods! (see explanation below)\n  const findAllReactCreateClassCalls = path =>\n    path.find(j.CallExpression, {\n      callee: REACT_CREATE_CLASS_MEMBER_EXPRESSION,\n    });\n\n  // Mixin Stuff\n  const containSameElements = (ls1, ls2) => {\n    if (ls1.length !== ls2.length) {\n      return false;\n    }\n\n    return (\n      ls1.reduce((res, x) => res && ls2.indexOf(x) !== -1, true) &&\n      ls2.reduce((res, x) => res && ls1.indexOf(x) !== -1, true)\n    );\n  };\n\n  const keyNameIsMixins = property => property.key.name === 'mixins';\n\n  const isSpecificMixinsProperty = (property, mixinIdentifierNames) => {\n    const key = property.key;\n    const value = property.value;\n\n    return (\n      key.name === 'mixins' &&\n      value.type === 'ArrayExpression' &&\n      Array.isArray(value.elements) &&\n      value.elements.every(elem => elem.type === 'Identifier') &&\n      containSameElements(value.elements.map(elem => elem.name), mixinIdentifierNames)\n    );\n  };\n\n  // These following methods assume that the argument is\n  // a `React.createClass` call expression. In other words,\n  // they should only be used with `findAllReactCreateClassCalls`.\n  const directlyGetCreateClassSpec = classPath => {\n    if (!classPath || !classPath.value) {\n      return null;\n    }\n    const args = classPath.value.arguments;\n    if (args && args.length) {\n      const spec = args[0];\n      if (spec.type === 'ObjectExpression' && Array.isArray(spec.properties)) {\n        return spec;\n      }\n    }\n    return null;\n  };\n\n  const directlyGetComponentName = classPath => {\n    let result = '';\n    if (\n      classPath.parentPath.value &&\n      classPath.parentPath.value.type === 'VariableDeclarator'\n    ) {\n      result = classPath.parentPath.value.id.name;\n    }\n    return result;\n  };\n\n  const directlyHasMixinsField = classPath => {\n    const spec = directlyGetCreateClassSpec(classPath);\n    return spec && spec.properties.some(keyNameIsMixins);\n  };\n\n  const directlyHasSpecificMixins = (classPath, mixinIdentifierNames) => {\n    const spec = directlyGetCreateClassSpec(classPath);\n    return spec && spec.properties.some(prop => isSpecificMixinsProperty(prop, mixinIdentifierNames));\n  };\n\n  return {\n    createCreateReactClassCallExpression,\n    findReactES6ClassDeclaration,\n    findReactCreateClass,\n    findReactCreateClassCallExpression,\n    findReactCreateClassModuleExports,\n    findReactCreateClassExportDefault,\n    getComponentName,\n    getReactCreateClassSpec,\n    getClassExtendReactSpec,\n    hasMixins,\n    hasModule,\n    hasReact,\n    isMixinProperty,\n\n    // \"direct\" methods\n    findAllReactCreateClassCalls,\n    directlyGetComponentName,\n    directlyGetCreateClassSpec,\n    directlyHasMixinsField,\n    directlyHasSpecificMixins,\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/custom-sort/custom-sort.input.js":"var React = require('react/addons');\n\n// comment above createClass\nvar MyComponent = React.createClass({\n  render: function() {\n    return <div />;\n  },\n\n  mixins: [PureRenderMixin],\n\n  // comment on componentDidMount\n  componentDidMount() {},\n\n  myOwnMethod(foo) {\n    // comment within method\n  },\n\n});\n\n/* comment at end */\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/custom-sort/custom-sort.output.js":"var React = require('react/addons');\n\n// comment above createClass\nvar MyComponent = React.createClass({\n  // comment on componentDidMount\n  componentDidMount() {},\n\n  mixins: [PureRenderMixin],\n\n  myOwnMethod(foo) {\n    // comment within method\n  },\n\n  render: function() {\n    return <div />;\n  },\n\n});\n\n/* comment at end */\nmodule.exports = MyComponent;\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow1.input.js":"class Component extends React.Component {\n  constructor() {\n    super();\n    this.onClick = this.onClick.bind(this);\n  }\n  onClick() { }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow1.output.js":"class Component extends React.Component {\n  onClick = () => { };\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow2.input.js":"class SomeName extends React.Component {\n  _onChange: Function;\n\n  constructor(props: Object) {\n    super(props);\n    this._onChange = this._onChange.bind(this);\n    if (!this.props.something.somePreference) {\n      this._onChange(SomeConstantsOptions.SOME_CONSTANT);\n    }\n  }\n\n  /* Some comment */\n  _onChange(value: String): void {\n    Dispatcher.handleViewAction({\n      type: SomeConstantsOptions.SOME_CONSTANT,\n      payload: value,\n    });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow2.output.js":"class SomeName extends React.Component {\n  _onChange: Function;\n\n  constructor(props: Object) {\n    super(props);\n    if (!this.props.something.somePreference) {\n      this._onChange(SomeConstantsOptions.SOME_CONSTANT);\n    }\n  }\n\n  /* Some comment */\n  _onChange = (value: String): void => {\n    Dispatcher.handleViewAction({\n      type: SomeConstantsOptions.SOME_CONSTANT,\n      payload: value,\n    });\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow3.input.js":"class Component extends React.Component {\n  constructor() {\n    super();\n    this.onClick = this.onClick.bind(this);\n  }\n  notOnClick() { }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow3.output.js":"","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow4.input.js":"class Component extends React.Component {\n  constructor() {\n    super();\n    (this: any).onClick = this.onClick.bind(this);\n  }\n  onClick() { }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow4.output.js":"class Component extends React.Component {\n  onClick = () => { };\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow5.input.js":"class Component extends React.Component {\n  constructor() {\n    super();\n    const self: any = this;\n    self.onClick = this.onClick.bind(this);\n  }\n  onClick() { }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow5.output.js":"class Component extends React.Component {\n  onClick = () => { };\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow6.input.js":"class Component extends React.Component {\n  constructor() {\n    super();\n    const self: any = this;\n    self._onMapResize = debounceCore(this._onMapResize.bind(this), 100);\n    self.onClick = this.onClick.bind(this);\n  }\n  onClick() { }\n  onMapResize() { }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow6.output.js":"class Component extends React.Component {\n  constructor() {\n    super();\n    const self: any = this;\n    self._onMapResize = debounceCore(this._onMapResize.bind(this), 100);\n  }\n  onClick = () => { };\n  onMapResize() { }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow7.input.js":"class SomeClass {\n  constructor() {\n    (this: any)._isLoaded = false;\n    (this: any).isLoaded = this.isLoaded.bind(this);\n  }\n\n  isLoaded(): boolean {\n    return this._isLoaded;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow7.output.js":"class SomeClass {\n  constructor() {\n    (this: any)._isLoaded = false;\n  }\n\n  isLoaded = (): boolean => {\n    return this._isLoaded;\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow8.input.js":"class Component extends React.Component {\n  constructor() {\n    super();\n    this.onClick = this.onClick.bind(this);\n  }\n  async onClick() { }\n}\n","/home/travis/build/npmtest/node-npmtest-react-codemod/node_modules/react-codemod/transforms/__testfixtures__/manual-bind-to-arrow/manual-bind-to-arrow8.output.js":"class Component extends React.Component {\n  onClick = async () => { };\n}\n"}